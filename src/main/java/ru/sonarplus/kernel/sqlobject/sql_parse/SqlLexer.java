/* The following code was generated by JFlex 1.6.1 */

   
/* --------------------------Usercode Section------------------------ */
package ru.sonarplus.kernel.sqlobject.sql_parse;
   
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>sql.flex</tt>
 */
public class SqlLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\11\1\12\1\1\22\0\1\3\1\0\1\16"+
    "\1\14\1\21\2\0\1\7\1\72\1\73\1\51\1\17\1\71\1\52"+
    "\1\20\1\50\1\4\11\5\1\13\1\0\1\75\1\74\1\76\2\0"+
    "\1\41\1\34\1\57\1\37\1\24\1\54\1\27\1\55\1\45\1\56"+
    "\1\70\1\53\1\62\1\46\1\31\1\33\1\65\1\30\1\61\1\43"+
    "\1\32\1\66\1\63\1\22\1\36\1\6\1\0\1\10\2\0\1\64"+
    "\1\77\1\42\1\35\1\23\1\40\1\25\1\26\1\27\1\55\1\45"+
    "\1\56\1\70\1\53\1\62\1\46\1\31\1\33\1\65\1\30\1\61"+
    "\1\43\1\32\1\66\1\63\1\22\1\36\1\6\1\0\1\47\10\0"+
    "\1\11\252\0\2\44\115\0\1\60\u0281\0\1\15\16\0\100\15\1\0"+
    "\1\15\u1bd6\0\1\11\1\11\u0100\0\1\67\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\2\1\1\5\1\6"+
    "\1\1\15\4\1\1\2\4\1\1\1\7\1\10\1\5"+
    "\3\4\1\1\4\4\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\3\1\0\1\20\3\0\7\4\1\0"+
    "\5\4\1\0\4\4\1\0\2\4\1\21\1\4\1\22"+
    "\10\4\1\0\3\4\2\23\1\4\1\24\1\0\2\4"+
    "\1\25\1\26\1\25\1\26\3\4\1\27\1\0\1\30"+
    "\1\4\1\0\4\4\3\0\4\4\1\0\1\4\1\0"+
    "\3\4\1\31\1\32\1\33\2\3\1\20\4\4\1\0"+
    "\3\4\1\0\1\4\1\34\1\0\1\4\1\0\5\4"+
    "\1\0\4\4\1\0\7\4\1\0\6\4\1\0\1\4"+
    "\1\35\1\4\1\0\1\4\1\36\1\37\2\40\2\4"+
    "\1\0\2\4\3\0\2\4\1\41\2\4\1\0\2\4"+
    "\1\0\3\4\3\0\1\42\2\0\2\4\1\42\3\4"+
    "\1\0\1\4\1\0\3\4\1\0\2\4\1\43\2\44"+
    "\2\4\1\0\1\4\2\45\1\0\2\4\1\46\1\4"+
    "\1\0\1\4\1\0\3\4\2\47\2\0\3\4\1\50"+
    "\1\51\1\4\1\0\3\4\1\52\2\4\2\53\1\54"+
    "\1\0\1\4\1\55\1\4\2\56\1\57\1\0\1\60"+
    "\2\0\1\4\1\60\1\4\1\61\1\4\1\30\1\62"+
    "\2\63\1\64\1\0\1\4\1\65\4\0\5\4\1\0"+
    "\1\4\2\66\1\4\1\67\1\4\1\0\1\4\1\70"+
    "\2\4\1\0\1\4\1\0\1\4\1\71\1\0\2\72"+
    "\2\73\2\4\2\0\4\4\2\74\1\0\4\4\1\0"+
    "\2\4\2\0\2\4\3\0\4\4\1\0\1\4\4\0"+
    "\4\4\1\75\1\0\1\76\1\4\1\76\1\77\1\4"+
    "\1\0\1\100\1\4\2\101\2\102\4\0\1\4\2\103"+
    "\2\0\1\104\1\0\3\4\1\105\1\0\2\4\2\0"+
    "\2\4\1\0\1\106\1\4\1\106\2\4\2\107\1\110"+
    "\1\111\1\112\1\113\1\110\1\111\1\112\1\113\2\114"+
    "\2\115\1\0\1\116\4\0\1\4\2\0\1\4\1\117"+
    "\1\120\1\0\1\4\1\121\2\0\2\4\1\0\3\4"+
    "\1\0\1\4\1\0\1\122\1\4\1\123\1\0\1\4"+
    "\2\124\2\0\2\4\1\0\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\1\4\1\0\1\4\1\0\1\125\1\4"+
    "\1\125\2\126\3\0\1\4\2\0\2\4\1\127\1\4"+
    "\3\0\2\4\2\0\1\4\2\0\3\4\3\0\2\4"+
    "\1\0\1\4\2\0\2\4\1\130\1\131\2\0\3\4"+
    "\2\0\2\4\1\132\1\0\1\132\1\4\1\133\1\0"+
    "\1\134\1\4\1\134\1\0\1\4\2\0\2\4\2\135"+
    "\1\136\1\0\1\136\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\2\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[547];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\100\0\300\0\u0100\0\u0140\0\u0180"+
    "\0\u01c0\0\100\0\u0200\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300"+
    "\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\100\0\u06c0"+
    "\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0"+
    "\0\100\0\100\0\100\0\100\0\u0900\0\u0940\0\100\0\u0980"+
    "\0\u09c0\0\u0180\0\u0a00\0\u0a40\0\u01c0\0\u0a80\0\u0ac0\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00"+
    "\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100"+
    "\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300"+
    "\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500"+
    "\0\u1540\0\u1580\0\100\0\u15c0\0\u0140\0\u1600\0\u1640\0\u1680"+
    "\0\100\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840"+
    "\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40"+
    "\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\100\0\100"+
    "\0\100\0\u1c00\0\100\0\u0a40\0\u0a80\0\u1c40\0\u1c80\0\u1cc0"+
    "\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u0140\0\u1e80"+
    "\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280"+
    "\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480"+
    "\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u0140\0\u2600\0\u2640"+
    "\0\u2680\0\u0140\0\u0140\0\100\0\u0140\0\u26c0\0\u2700\0\u2740"+
    "\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900\0\u0140"+
    "\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00"+
    "\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\100\0\u2c40\0\u2c80\0\u2cc0"+
    "\0\u2d00\0\u0140\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80"+
    "\0\u2ec0\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u0140\0\100"+
    "\0\u0140\0\u3040\0\u3080\0\u30c0\0\u3100\0\100\0\u0140\0\u3140"+
    "\0\u3180\0\u31c0\0\u0140\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300"+
    "\0\u3340\0\u3380\0\100\0\u0140\0\u33c0\0\u3400\0\u3440\0\u3480"+
    "\0\u34c0\0\u0140\0\u0140\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600"+
    "\0\u0140\0\u3640\0\u3680\0\100\0\u0140\0\u0140\0\u36c0\0\u3700"+
    "\0\u0140\0\u3740\0\u3780\0\u37c0\0\u0140\0\u3800\0\100\0\u3840"+
    "\0\u3880\0\u38c0\0\u0140\0\u3900\0\u0140\0\u3940\0\u16c0\0\u3980"+
    "\0\100\0\u0140\0\u0140\0\u39c0\0\u3a00\0\100\0\u3a40\0\u3a80"+
    "\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u3c80"+
    "\0\u3cc0\0\100\0\u0140\0\u3d00\0\u0140\0\u3d40\0\u3d80\0\u3dc0"+
    "\0\u0140\0\u3e00\0\u3e40\0\u3e80\0\u3ec0\0\u3f00\0\u3f40\0\u0140"+
    "\0\u3f80\0\100\0\u0140\0\100\0\u0140\0\u3fc0\0\u4000\0\u4040"+
    "\0\u4080\0\u40c0\0\u4100\0\u4140\0\u4180\0\100\0\u0140\0\u41c0"+
    "\0\u4200\0\u4240\0\u4280\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0"+
    "\0\u4400\0\u4440\0\u4480\0\u44c0\0\u4500\0\u4540\0\u4580\0\u45c0"+
    "\0\u4600\0\u4640\0\u4680\0\u46c0\0\u4700\0\u4740\0\u4780\0\u47c0"+
    "\0\u4800\0\u4840\0\u4880\0\u48c0\0\u0140\0\u4900\0\100\0\u4940"+
    "\0\u0140\0\u0140\0\u4980\0\u49c0\0\u0140\0\u4a00\0\100\0\u0140"+
    "\0\100\0\u0140\0\u4a40\0\u4a80\0\u4ac0\0\u4b00\0\u4b40\0\100"+
    "\0\u0140\0\u4b80\0\u4bc0\0\u0140\0\u4c00\0\u4c40\0\u4c80\0\u4cc0"+
    "\0\u0140\0\u4d00\0\u4d40\0\u4d80\0\u4dc0\0\u4e00\0\u4e40\0\u4e80"+
    "\0\u4ec0\0\100\0\u4f00\0\u0140\0\u4f40\0\u4f80\0\100\0\u0140"+
    "\0\100\0\100\0\100\0\u4fc0\0\u0140\0\u0140\0\u0140\0\u5000"+
    "\0\100\0\u0140\0\100\0\u0140\0\u5040\0\u0140\0\u5080\0\u50c0"+
    "\0\u5100\0\u5140\0\u5180\0\u51c0\0\u5200\0\u5240\0\u0140\0\u0140"+
    "\0\u5280\0\u52c0\0\u0140\0\u5300\0\u5340\0\u5380\0\u53c0\0\u5400"+
    "\0\u5440\0\u5480\0\u54c0\0\u5500\0\u5540\0\u5580\0\100\0\u55c0"+
    "\0\100\0\u5600\0\u5640\0\100\0\u0140\0\u5680\0\u56c0\0\u5700"+
    "\0\u5740\0\u5780\0\u57c0\0\u5800\0\u5840\0\u5880\0\u58c0\0\u5900"+
    "\0\u5940\0\u5980\0\u59c0\0\u5a00\0\u5a40\0\u5a80\0\100\0\u5ac0"+
    "\0\u0140\0\100\0\u0140\0\u5b00\0\u5b40\0\u5b80\0\u5bc0\0\u5c00"+
    "\0\u5c40\0\u5c80\0\u5cc0\0\100\0\u5d00\0\u5d40\0\u5d80\0\u5dc0"+
    "\0\u5e00\0\u5e40\0\u5e80\0\u5ec0\0\u5f00\0\u5f40\0\u5f80\0\u5fc0"+
    "\0\u6000\0\u6040\0\u6080\0\u60c0\0\u6100\0\u6140\0\u6180\0\u61c0"+
    "\0\u6200\0\u6240\0\u6280\0\u62c0\0\u6300\0\u0140\0\100\0\u6340"+
    "\0\u6380\0\u63c0\0\u6400\0\u6440\0\u6480\0\u64c0\0\u6500\0\u6540"+
    "\0\100\0\u6580\0\u0140\0\u65c0\0\u0140\0\u6600\0\u6640\0\u6680"+
    "\0\u66c0\0\u6700\0\u6740\0\u6780\0\u67c0\0\u6800\0\u6840\0\100"+
    "\0\u0140\0\100\0\u6880\0\u0140\0\u68c0\0\u6900\0\u6940\0\u6980"+
    "\0\u69c0\0\u6a00\0\u6a40\0\u6a80\0\u6ac0\0\u6b00\0\u6b40\0\u6b80"+
    "\0\u6bc0\0\100\0\u0140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[547];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\2\2"+
    "\1\4\1\7\1\2\1\7\1\11\1\12\1\13\1\14"+
    "\1\7\1\15\2\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\2\25\1\26\2\27\2\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\17\1\42"+
    "\1\43\1\15\1\44\1\45\1\46\1\47\2\7\1\50"+
    "\1\2\1\7\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\102\0\1\4\101\0\2\6\12\0\1\6\1\0"+
    "\2\6\1\60\1\61\1\6\6\0\1\6\2\0\1\6"+
    "\1\0\1\6\41\0\2\6\12\0\1\6\2\0\1\6"+
    "\1\60\1\61\1\6\6\0\1\6\2\0\1\6\1\0"+
    "\1\6\41\0\3\7\5\0\2\7\3\0\23\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\7\0"+
    "\7\62\1\63\1\64\67\62\10\65\1\66\5\65\1\67"+
    "\61\65\4\0\2\6\76\0\3\7\5\0\2\7\3\0"+
    "\7\7\1\70\5\7\1\71\2\7\2\72\1\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\1\7\1\73\21\7\1\0"+
    "\1\7\1\74\4\0\1\75\4\7\1\76\1\77\5\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\3\7"+
    "\2\100\2\7\1\101\1\7\1\102\6\7\2\103\1\7"+
    "\1\104\1\105\1\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\7\7\1\106"+
    "\13\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\3\7\2\107"+
    "\3\7\1\110\12\7\1\111\1\112\1\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\5\7\1\113\1\7\1\114\1\7\1\115\11\7"+
    "\1\0\1\7\1\116\4\0\1\7\1\113\3\7\1\0"+
    "\5\7\1\117\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\12\7\1\120\10\7\1\0\1\7\1\121\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\20\7\2\122\1\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\3\7\2\123\16\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\3\7\2\124\16\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\3\7\2\125\13\7\2\126\1\7\1\127"+
    "\1\130\1\7\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\13\0\3\7\5\0\2\7\3\0\23\7\1\0\1\7"+
    "\1\131\4\0\1\132\4\7\1\133\1\134\5\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\7\7\1\135"+
    "\1\136\12\7\1\137\1\140\1\7\4\0\2\7\1\141"+
    "\2\7\1\0\6\7\1\0\1\7\55\0\1\142\11\0"+
    "\2\143\22\0\3\7\5\0\2\7\3\0\23\7\1\0"+
    "\1\7\1\144\4\0\5\7\1\143\1\145\5\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\10\7\1\146"+
    "\1\147\6\7\2\150\1\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\56\0\1\151\101\0\1\152"+
    "\100\0\1\153\31\0\3\7\5\0\2\7\3\0\3\7"+
    "\2\154\16\7\1\155\1\156\1\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\10\7\1\157\7\7\2\160\1\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\10\7\1\161\12\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\32\0\1\162\2\163"+
    "\4\0\1\164\24\0\1\162\24\0\3\7\5\0\2\7"+
    "\3\0\2\7\1\165\2\166\4\7\1\167\11\7\1\0"+
    "\2\7\4\0\4\7\1\165\1\0\6\7\1\0\1\7"+
    "\13\0\3\7\5\0\2\7\3\0\10\7\1\170\12\7"+
    "\1\171\1\172\1\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\23\7\1\173"+
    "\1\174\1\7\4\0\2\7\1\175\2\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\20\7"+
    "\2\176\1\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\103\0\1\177\1\0\1\200\75\0\1\201"+
    "\7\0\2\202\11\0\1\202\6\0\1\203\11\0\1\203"+
    "\11\0\1\202\31\0\2\6\11\0\1\202\1\6\2\0"+
    "\1\6\1\60\1\61\1\6\6\0\1\6\2\0\1\6"+
    "\1\0\1\6\7\0\1\202\34\0\1\62\70\0\7\62"+
    "\1\204\1\64\67\62\10\65\1\66\5\65\1\205\61\65"+
    "\16\0\1\65\65\0\3\7\5\0\2\7\3\0\10\7"+
    "\1\206\12\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\2\7"+
    "\1\207\20\7\1\0\2\7\4\0\4\7\1\207\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\23\7\1\0\2\7\4\0\1\210\4\7\1\211\1\212"+
    "\5\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\2\7\1\213\17\7\1\214\1\215\1\216\1\7\4\0"+
    "\4\7\1\213\1\0\6\7\1\0\1\7\13\0\3\7"+
    "\5\0\2\7\3\0\16\7\2\217\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\13\0\3\7"+
    "\5\0\2\7\3\0\23\7\1\0\2\7\4\0\5\7"+
    "\1\220\1\221\5\7\1\0\1\7\32\0\1\222\33\0"+
    "\1\222\24\0\3\7\5\0\2\7\3\0\2\7\1\223"+
    "\20\7\1\0\2\7\4\0\4\7\1\223\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\22\7"+
    "\1\224\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\10\7\1\225"+
    "\12\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\23\7\1\0"+
    "\2\7\4\0\1\226\4\7\1\0\6\7\1\0\1\7"+
    "\13\0\3\7\5\0\2\7\3\0\23\7\1\0\2\7"+
    "\4\0\1\227\4\7\1\0\6\7\1\0\1\7\37\0"+
    "\1\230\53\0\3\7\5\0\2\7\3\0\7\7\1\231"+
    "\13\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\10\7\1\232"+
    "\12\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\6\7\1\233"+
    "\14\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\23\7\1\0"+
    "\2\7\4\0\5\7\1\0\2\7\1\234\3\7\1\0"+
    "\1\7\36\0\1\235\54\0\3\7\5\0\2\7\3\0"+
    "\6\7\1\236\14\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\5\7\1\237\15\7\1\0\2\7\4\0\1\7\1\237"+
    "\3\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\16\7\2\240\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\22\7\1\241\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\2\7\4\0\1\242\4\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\3\7\2\243\16\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\16\7\2\244\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\23\7\1\245\1\246\1\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\7\7"+
    "\1\247\13\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\22\7"+
    "\1\250\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\20\7\2\251"+
    "\1\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\5\7\1\252"+
    "\15\7\1\0\2\7\4\0\1\253\1\252\3\7\1\254"+
    "\1\255\5\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\15\7\1\256\4\7\1\257\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\67\0\2\260\22\0"+
    "\3\7\5\0\2\7\3\0\23\7\1\0\2\7\4\0"+
    "\5\7\1\260\1\261\5\7\1\0\1\7\13\0\3\7"+
    "\5\0\2\7\3\0\16\7\2\262\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\13\0\3\7"+
    "\5\0\2\7\3\0\23\7\1\0\2\7\4\0\1\263"+
    "\4\7\1\0\6\7\1\0\1\7\32\0\1\264\33\0"+
    "\1\264\24\0\3\7\5\0\2\7\3\0\2\7\1\265"+
    "\20\7\1\0\2\7\4\0\4\7\1\265\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\11\7"+
    "\1\266\11\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\23\7"+
    "\1\0\2\7\4\0\5\7\1\0\3\7\1\267\2\7"+
    "\1\0\1\7\71\0\1\270\21\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\271\4\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\3\7\2\272\16\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\52\0\1\273\2\0\1\274"+
    "\11\0\2\275\22\0\3\7\5\0\2\7\3\0\22\7"+
    "\1\276\1\0\1\7\1\241\4\0\5\7\1\275\1\277"+
    "\5\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\22\7\1\300\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\23\7"+
    "\1\0\2\7\4\0\1\301\4\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\22\7\1\302"+
    "\1\0\2\7\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\7\0\51\152\1\303\26\152\1\153\2\0\6\153\2\0"+
    "\65\153\4\0\3\7\5\0\2\7\3\0\5\7\1\304"+
    "\12\7\2\305\1\7\1\0\2\7\4\0\1\7\1\304"+
    "\3\7\1\0\6\7\1\0\1\7\76\0\2\306\13\0"+
    "\3\7\5\0\2\7\3\0\23\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\306\1\307\13\0\3\7\5\0"+
    "\2\7\3\0\11\7\1\310\11\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\23\7\1\0\2\7\4\0\5\7\1\0"+
    "\5\7\1\311\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\312\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\50\0\2\313\60\0\1\314\17\0\1\315"+
    "\7\0\1\316\3\0\1\314\54\0\2\317\46\0\3\7"+
    "\5\0\2\7\3\0\20\7\2\320\1\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\13\0\3\7"+
    "\5\0\2\7\3\0\2\7\1\321\17\7\1\322\1\0"+
    "\2\7\4\0\1\323\3\7\1\321\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\13\7\2\324"+
    "\6\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\23\7\1\0"+
    "\1\7\1\325\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\55\0\1\326\35\0\3\7\5\0\2\7\3\0\23\7"+
    "\1\0\1\7\1\327\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\52\0\1\330\40\0\3\7\5\0\2\7\3\0"+
    "\22\7\1\331\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\3\7"+
    "\2\332\16\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\23\7"+
    "\1\0\2\7\4\0\1\333\4\7\1\0\6\7\1\0"+
    "\1\7\13\0\2\202\20\0\1\203\11\0\1\203\43\0"+
    "\3\7\5\0\2\7\3\0\23\7\1\0\2\7\4\0"+
    "\5\7\1\334\1\335\5\7\1\0\1\7\13\0\3\7"+
    "\5\0\2\7\3\0\23\7\1\0\2\7\4\0\1\336"+
    "\4\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\23\7\1\0\2\7\4\0\1\337\4\7"+
    "\1\0\6\7\1\0\1\7\33\0\2\340\56\0\3\7"+
    "\5\0\2\7\3\0\3\7\2\341\16\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\13\0\3\7"+
    "\5\0\2\7\3\0\3\7\2\342\16\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\13\0\3\7"+
    "\5\0\2\7\3\0\7\7\1\343\13\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\67\0\2\344"+
    "\22\0\3\7\5\0\2\7\3\0\23\7\1\0\2\7"+
    "\4\0\5\7\1\344\1\345\5\7\1\0\1\7\33\0"+
    "\2\346\56\0\3\7\5\0\2\7\3\0\3\7\2\347"+
    "\16\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\50\0\2\350\41\0\3\7\5\0\2\7\3\0"+
    "\20\7\2\351\1\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\2\7\1\352\20\7\1\0\2\7\4\0\4\7\1\352"+
    "\1\0\6\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\1\353\4\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\2\7\4\0\1\354\4\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\23\7\1\0\2\7\4\0\5\7\1\355\1\356\5\7"+
    "\1\0\1\7\67\0\2\357\22\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\2\7\4\0\5\7\1\357\1\360"+
    "\5\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\11\7\1\361\11\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\3\7\2\362\16\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\23\7\1\0\2\7\4\0\5\7\1\363\1\364\5\7"+
    "\1\0\1\7\64\0\1\365\26\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\2\7\4\0\2\7\1\304\2\7"+
    "\1\0\6\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\2\7\4\0\5\7\1\366\1\367"+
    "\5\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\3\7\2\370\16\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\3\7\2\371\16\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\15\7\1\372\5\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\7\7\1\373\13\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\20\7\2\374\1\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\40\0\1\375\52\0\3\7\5\0"+
    "\2\7\3\0\10\7\1\376\12\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\22\7\1\377\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\2\7\4\0\5\7\1\0\2\7"+
    "\1\u0100\3\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\7\7\1\u0101\13\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\20\7\2\u0102\1\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\3\7\2\u0103\16\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\32\0\1\u0104\33\0\1\u0104"+
    "\24\0\3\7\5\0\2\7\3\0\2\7\1\u0105\20\7"+
    "\1\0\2\7\4\0\4\7\1\u0105\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\3\7\2\u0106"+
    "\16\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\52\0\1\u0107\40\0\3\7\5\0\2\7\3\0"+
    "\22\7\1\u0108\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\3\7"+
    "\2\u0109\16\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\2\7"+
    "\1\u010a\20\7\1\0\2\7\4\0\4\7\1\u010a\1\0"+
    "\6\7\1\0\1\7\33\0\2\u010b\56\0\3\7\5\0"+
    "\2\7\3\0\3\7\2\u010c\16\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\23\7\1\0\1\7\1\u010d\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\33\0\2\u010e\3\0\1\u010f"+
    "\72\0\2\u0110\76\0\2\u0111\56\0\3\7\5\0\2\7"+
    "\3\0\3\7\2\u0112\3\7\1\u0113\12\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\13\0\3\7"+
    "\5\0\2\7\3\0\3\7\2\u0114\16\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\13\0\3\7"+
    "\5\0\2\7\3\0\23\7\1\0\2\7\4\0\1\u0115"+
    "\4\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\11\7\1\u0116\11\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\7\0\50\152\1\u0117"+
    "\1\303\26\152\4\0\3\7\5\0\2\7\3\0\22\7"+
    "\1\354\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\5\7\1\u0118"+
    "\15\7\1\0\2\7\4\0\1\7\1\u0118\3\7\1\0"+
    "\6\7\1\0\1\7\33\0\2\u0119\56\0\3\7\5\0"+
    "\2\7\3\0\3\7\2\u011a\16\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\7\7\1\u011b\13\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\23\7\1\u011c\1\u011d\1\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\55\0\1\u011e\104\0\1\u011f"+
    "\55\0\1\u0120\72\0\2\u0121\103\0\1\u0122\52\0\3\7"+
    "\5\0\2\7\3\0\23\7\1\0\2\7\4\0\1\u0123"+
    "\4\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\10\7\1\u0124\12\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\3\7\2\u0125\16\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\10\7\1\u0126\12\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\22\7\1\u0127\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\41\0\1\u0128\51\0\3\7"+
    "\5\0\2\7\3\0\11\7\1\u0129\11\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\64\0\1\u012a"+
    "\26\0\3\7\5\0\2\7\3\0\23\7\1\0\2\7"+
    "\4\0\2\7\1\u012b\2\7\1\0\6\7\1\0\1\7"+
    "\13\0\3\7\5\0\2\7\3\0\7\7\1\u012c\13\7"+
    "\1\0\1\7\1\u012d\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\11\7\1\u012e"+
    "\11\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\67\0\2\u012f\22\0\3\7\5\0\2\7\3\0"+
    "\23\7\1\0\2\7\4\0\5\7\1\u012f\1\u0130\5\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\3\7"+
    "\2\u0131\16\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\12\7"+
    "\1\u0132\10\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\20\7"+
    "\2\u0133\1\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\52\0\1\u0134\40\0\3\7\5\0\2\7"+
    "\3\0\22\7\1\u0135\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\42\0\1\u0136\50\0\3\7\5\0"+
    "\2\7\3\0\12\7\1\u0137\10\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\23\7\1\0\2\7\4\0\2\7\1\u0138"+
    "\2\7\1\0\6\7\1\0\1\7\11\0\2\u0139\3\7"+
    "\5\0\2\7\3\0\23\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\33\0\2\u013a\56\0\3\7"+
    "\5\0\2\7\3\0\3\7\2\u013b\16\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\52\0\1\u013c"+
    "\40\0\3\7\5\0\2\7\3\0\22\7\1\u013d\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\12\7\1\u013e\10\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\1\7\1\u013f\21\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\52\0"+
    "\1\u0140\60\0\2\u0141\56\0\3\7\5\0\2\7\3\0"+
    "\3\7\2\u0142\16\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\7\7\1\u0143\13\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\7\7\1\u0144\13\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\22\7\1\u0145\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\55\0\1\u0146\35\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\1\7\1\u0147\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\23\7\1\u0148\1\u0149\1\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\3\7"+
    "\2\u014a\16\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\11\7"+
    "\1\u014b\11\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\22\7"+
    "\1\u014c\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\53\0\2\u014d\36\0\3\7\5\0\2\7\3\0"+
    "\23\7\1\u014d\1\u014e\1\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\10\7"+
    "\1\u014f\12\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\15\0\1\u0150\51\0\2\u0151\22\0\2\7"+
    "\1\u0152\5\0\2\7\3\0\23\7\1\0\2\7\4\0"+
    "\5\7\1\u0151\1\u0153\5\7\1\0\1\7\37\0\1\u0154"+
    "\77\0\1\u0155\77\0\1\u0156\53\0\3\7\5\0\2\7"+
    "\3\0\7\7\1\u0157\13\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\7\7\1\u0158\13\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\7\7\1\u0159\13\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\2\7\4\0\5\7\1\0\3\7"+
    "\1\u015a\2\7\1\0\1\7\55\0\1\u015b\35\0\3\7"+
    "\5\0\2\7\3\0\23\7\1\0\1\7\1\u015c\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\50\0\2\u015d\103\0"+
    "\1\u015e\54\0\1\u015f\33\0\1\u015f\50\0\1\u0160\53\0"+
    "\3\7\5\0\2\7\3\0\20\7\2\u0161\1\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\23\7\1\0\1\7\1\u0162"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\13\0\3\7"+
    "\5\0\2\7\3\0\2\7\1\u0163\20\7\1\0\2\7"+
    "\4\0\4\7\1\u0163\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\7\7\1\u0164\13\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\23\7\1\0\2\7\4\0"+
    "\2\7\1\u0165\2\7\1\0\6\7\1\0\1\7\52\0"+
    "\1\u0166\14\0\2\u0167\22\0\3\7\5\0\2\7\3\0"+
    "\22\7\1\u0168\1\0\2\7\4\0\5\7\1\u0167\1\u0169"+
    "\5\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\3\7\2\u016a\16\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\3\7\2\u016b\16\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\11\0\2\u016c\76\0\2\u016c\3\7"+
    "\5\0\2\7\3\0\23\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\22\7\1\u016d\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\2\7\1\u016e\20\7\1\0\2\7\4\0\4\7\1\u016e"+
    "\1\0\6\7\1\0\1\7\67\0\2\u016f\22\0\3\7"+
    "\5\0\2\7\3\0\23\7\1\0\2\7\4\0\5\7"+
    "\1\u016f\1\u0170\5\7\1\0\1\7\33\0\2\u0171\56\0"+
    "\3\7\5\0\2\7\3\0\3\7\2\u0172\16\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\11\0"+
    "\2\u0139\25\0\1\u0173\12\0\2\u0174\10\0\1\u0175\23\0"+
    "\2\u0176\3\7\5\0\2\7\3\0\23\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\13\0\3\7"+
    "\5\0\2\7\3\0\12\7\1\u0177\10\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\11\0\2\u0139"+
    "\137\0\1\u0178\40\0\3\7\5\0\2\7\3\0\22\7"+
    "\1\u0179\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\11\0\2\u017a\3\7\5\0\2\7\3\0\23\7"+
    "\1\0\2\7\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\11\0\2\u017b\3\7\5\0\2\7\3\0\23\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\3\7\2\u017c\16\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\52\0"+
    "\1\u017d\40\0\3\7\5\0\2\7\3\0\22\7\1\u017e"+
    "\1\0\2\7\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\13\0\3\7\5\0\2\7\3\0\3\7\2\u017f\16\7"+
    "\1\0\2\7\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\13\0\3\7\5\0\2\7\3\0\23\7\1\0\2\7"+
    "\4\0\1\u0180\4\7\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\3\7\2\u0181\16\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\55\0"+
    "\1\u0182\35\0\3\7\5\0\2\7\3\0\23\7\1\0"+
    "\1\7\1\u0183\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\13\0\3\7\5\0\2\7\3\0\16\7\2\u0184\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\40\0\1\u0185\111\0\1\u0186\40\0\3\7\5\0\2\7"+
    "\3\0\10\7\1\u0187\12\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\22\7\1\u0188\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\67\0\2\u0189\20\0\2\u017b\137\0"+
    "\1\u018a\40\0\3\7\5\0\2\7\3\0\23\7\1\0"+
    "\2\7\4\0\5\7\1\u0189\1\u018b\5\7\1\0\1\7"+
    "\13\0\3\7\5\0\2\7\3\0\22\7\1\u018c\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\20\7\2\u018d\1\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\10\7\1\u018e\12\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\36\0"+
    "\1\u018f\54\0\3\7\5\0\2\7\3\0\6\7\1\u0190"+
    "\14\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\37\0\1\u0191\106\0\2\u0192\102\0\1\u0193\73\0"+
    "\2\u0194\43\0\3\7\5\0\2\7\3\0\7\7\1\u0195"+
    "\13\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\16\7\2\u0196"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\22\7\1\u0197"+
    "\1\0\2\7\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\13\0\3\7\5\0\2\7\3\0\16\7\2\u0198\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\33\0\2\u0199\56\0\3\7\5\0\2\7\3\0\3\7"+
    "\2\u019a\16\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\23\7"+
    "\1\0\2\7\4\0\5\7\1\u019b\1\u019c\5\7\1\0"+
    "\1\7\11\0\2\u016c\52\0\1\u019d\25\0\3\7\5\0"+
    "\2\7\3\0\22\7\1\u019e\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\41\0\1\u019f\113\0\1\u01a0"+
    "\62\0\1\u01a1\50\0\2\u0176\30\0\2\u01a2\46\0\3\7"+
    "\5\0\2\7\3\0\23\7\1\0\2\7\4\0\5\7"+
    "\1\0\3\7\1\u01a3\2\7\1\0\1\7\11\0\2\u017a"+
    "\30\0\2\u01a4\44\0\2\u017b\52\0\1\u0175\65\0\2\u01a5"+
    "\36\0\3\7\5\0\2\7\3\0\23\7\1\u01a5\1\u01a6"+
    "\1\7\4\0\5\7\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\23\7\1\0\1\7\1\u01a7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\13\0\3\7"+
    "\5\0\2\7\3\0\22\7\1\u01a8\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\32\0\1\u01a9\33\0"+
    "\1\u01a9\24\0\3\7\5\0\2\7\3\0\2\7\1\u01aa"+
    "\20\7\1\0\2\7\4\0\4\7\1\u01aa\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\3\7"+
    "\2\u01ab\16\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\55\0\1\u01ac\72\0\2\u01ad\41\0\3\7"+
    "\5\0\2\7\3\0\23\7\1\0\1\7\1\u01ae\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\13\0\3\7\5\0"+
    "\2\7\3\0\20\7\2\u01af\1\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\33\0\2\u01b0\56\0"+
    "\3\7\5\0\2\7\3\0\3\7\2\u01b1\16\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\23\7\1\0\2\7\4\0"+
    "\1\u01b2\4\7\1\0\6\7\1\0\1\7\13\0\3\7"+
    "\5\0\2\7\3\0\7\7\1\u01b3\13\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\73\0\1\u01b4"+
    "\17\0\3\7\5\0\2\7\3\0\23\7\1\0\2\7"+
    "\4\0\5\7\1\0\3\7\1\u01b5\2\7\1\0\1\7"+
    "\40\0\1\u01b6\111\0\1\274\102\0\1\274\75\0\2\312"+
    "\70\0\1\u01b7\45\0\3\7\5\0\2\7\3\0\23\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\1\u01b8\4\7"+
    "\1\0\1\7\45\0\1\u01b9\72\0\1\u01ba\52\0\3\7"+
    "\5\0\2\7\3\0\10\7\1\u01bb\12\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\52\0\1\u01bc"+
    "\40\0\3\7\5\0\2\7\3\0\22\7\1\u01bd\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\33\0"+
    "\2\u01be\134\0\1\u01bf\21\0\3\7\5\0\2\7\3\0"+
    "\3\7\2\u01c0\16\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\23\7\1\0\2\7\4\0\5\7\1\0\1\7\1\u01c1"+
    "\4\7\1\0\1\7\32\0\1\u01c2\33\0\1\u01c2\24\0"+
    "\3\7\5\0\2\7\3\0\2\7\1\u01c3\20\7\1\0"+
    "\2\7\4\0\4\7\1\u01c3\1\0\6\7\1\0\1\7"+
    "\11\0\2\u01c4\3\7\5\0\2\7\3\0\23\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\23\7\1\0\2\7\4\0"+
    "\5\7\1\0\3\7\1\u01c5\2\7\1\0\1\7\40\0"+
    "\1\u01c6\5\0\2\u01c7\43\0\3\7\5\0\2\7\3\0"+
    "\10\7\1\u01c8\5\7\2\u01c9\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\53\0\2\u01ca\36\0"+
    "\3\7\5\0\2\7\3\0\20\7\2\u01cb\1\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\55\0"+
    "\1\u01cc\35\0\3\7\5\0\2\7\3\0\23\7\1\0"+
    "\1\7\1\u01cd\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\73\0\1\u01ce\46\0\1\u01cf\50\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\2\7\4\0\5\7\1\0\3\7"+
    "\1\u01d0\2\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\12\7\1\u01d1\10\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\52\0\1\u01d2\40\0\3\7"+
    "\5\0\2\7\3\0\22\7\1\u01d3\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\11\0\2\u01c4\22\0"+
    "\1\u01d4\1\0\1\u01d5\1\u0173\12\0\2\u0174\5\0\1\u01d6"+
    "\1\u01d4\1\0\1\u0175\25\0\3\7\5\0\2\7\3\0"+
    "\3\7\2\u01d7\16\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\37\0\1\u01d8\113\0\2\u01d9\36\0"+
    "\3\7\5\0\2\7\3\0\7\7\1\u01da\13\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\23\7\1\u01d9\1\u01db\1\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\55\0\1\u01dc"+
    "\35\0\3\7\5\0\2\7\3\0\22\7\1\u01dd\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\11\0"+
    "\2\u01de\76\0\2\u01de\3\7\5\0\2\7\3\0\23\7"+
    "\1\0\2\7\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\64\0\1\u01df\4\0\1\u01e0\21\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\2\7\4\0\2\7\1\u01e1\2\7"+
    "\1\0\1\7\1\u01e2\4\7\1\0\1\7\41\0\1\u01e3"+
    "\111\0\2\111\56\0\2\u01e4\56\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\2\7\4\0\5\7\1\0\4\7"+
    "\1\u01e5\1\7\1\0\1\7\73\0\1\u01e6\43\0\1\u01e7"+
    "\53\0\3\7\5\0\2\7\3\0\23\7\1\0\2\7"+
    "\4\0\5\7\1\0\3\7\1\u01e8\2\7\1\0\1\7"+
    "\13\0\3\7\5\0\2\7\3\0\7\7\1\u01e9\13\7"+
    "\1\0\2\7\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\13\0\3\7\5\0\2\7\3\0\2\7\1\u01ea\20\7"+
    "\1\0\2\7\4\0\4\7\1\u01ea\1\0\6\7\1\0"+
    "\1\7\11\0\2\u01de\30\0\2\u01eb\73\0\1\u01ec\112\0"+
    "\2\u01ed\36\0\3\7\5\0\2\7\3\0\10\7\1\u01ee"+
    "\12\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\13\0\3\7\5\0\2\7\3\0\23\7\1\u01ed"+
    "\1\u01ef\1\7\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\62\0\1\u01f0\52\0\1\365\25\0\1\365\27\0\3\7"+
    "\5\0\2\7\3\0\11\7\1\u01f1\11\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\33\0\2\u01f2"+
    "\76\0\2\u01f3\56\0\3\7\5\0\2\7\3\0\3\7"+
    "\2\u01f4\16\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\3\7"+
    "\2\u01f5\16\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\13\0\3\7\5\0\2\7\3\0\23\7"+
    "\1\0\2\7\4\0\2\7\1\u01f6\2\7\1\0\6\7"+
    "\1\0\1\7\45\0\1\u01f7\73\0\1\u01f8\113\0\1\u01f9"+
    "\35\0\3\7\5\0\2\7\3\0\11\7\1\u01fa\11\7"+
    "\1\0\2\7\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\13\0\3\7\5\0\2\7\3\0\23\7\1\0\1\7"+
    "\1\u01fb\4\0\5\7\1\0\6\7\1\0\1\7\62\0"+
    "\1\u0140\30\0\3\7\5\0\2\7\3\0\20\7\2\u01fc"+
    "\1\7\1\0\2\7\4\0\5\7\1\0\6\7\1\0"+
    "\1\7\74\0\1\u01fd\35\0\1\u01fe\33\0\1\u01fe\24\0"+
    "\3\7\5\0\2\7\3\0\23\7\1\0\2\7\4\0"+
    "\5\7\1\0\4\7\1\u01ff\1\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\2\7\1\u0200\20\7\1\0"+
    "\2\7\4\0\4\7\1\u0200\1\0\6\7\1\0\1\7"+
    "\37\0\1\u0201\101\0\1\u0202\51\0\3\7\5\0\2\7"+
    "\3\0\7\7\1\u0203\13\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\11\7\1\u0204\11\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\13\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\2\7\4\0\1\u0205\4\7\1\0"+
    "\6\7\1\0\1\7\41\0\1\u0206\110\0\1\u0207\40\0"+
    "\3\7\5\0\2\7\3\0\11\7\1\u0208\11\7\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\13\0"+
    "\3\7\5\0\2\7\3\0\22\7\1\u0209\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\52\0\1\u020a"+
    "\40\0\3\7\5\0\2\7\3\0\22\7\1\u020b\1\0"+
    "\2\7\4\0\5\7\1\0\6\7\1\0\1\7\50\0"+
    "\2\u020c\121\0\1\u020d\17\0\3\7\5\0\2\7\3\0"+
    "\20\7\2\u020e\1\7\1\0\2\7\4\0\5\7\1\0"+
    "\6\7\1\0\1\7\13\0\3\7\5\0\2\7\3\0"+
    "\23\7\1\0\2\7\4\0\5\7\1\0\3\7\1\u020f"+
    "\2\7\1\0\1\7\33\0\2\u0210\56\0\3\7\5\0"+
    "\2\7\3\0\3\7\2\u0211\16\7\1\0\2\7\4\0"+
    "\5\7\1\0\6\7\1\0\1\7\62\0\1\u0212\55\0"+
    "\1\u0213\52\0\3\7\5\0\2\7\3\0\23\7\1\0"+
    "\2\7\4\0\1\u0214\4\7\1\0\6\7\1\0\1\7"+
    "\13\0\3\7\5\0\2\7\3\0\10\7\1\u0215\12\7"+
    "\1\0\2\7\4\0\5\7\1\0\6\7\1\0\1\7"+
    "\37\0\1\u0216\53\0\3\7\5\0\2\7\3\0\7\7"+
    "\1\u0217\13\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\73\0\1\u0218\17\0\3\7\5\0\2\7"+
    "\3\0\23\7\1\0\2\7\4\0\5\7\1\0\3\7"+
    "\1\u0219\2\7\1\0\1\7\33\0\2\u021a\56\0\3\7"+
    "\5\0\2\7\3\0\3\7\2\u021b\16\7\1\0\2\7"+
    "\4\0\5\7\1\0\6\7\1\0\1\7\74\0\1\u021c"+
    "\16\0\3\7\5\0\2\7\3\0\23\7\1\0\2\7"+
    "\4\0\5\7\1\0\4\7\1\u021d\1\7\1\0\1\7"+
    "\41\0\1\u021e\51\0\3\7\5\0\2\7\3\0\11\7"+
    "\1\u021f\11\7\1\0\2\7\4\0\5\7\1\0\6\7"+
    "\1\0\1\7\50\0\2\u0220\41\0\3\7\5\0\2\7"+
    "\3\0\20\7\2\u0221\1\7\1\0\2\7\4\0\5\7"+
    "\1\0\6\7\1\0\1\7\62\0\1\u0222\30\0\3\7"+
    "\5\0\2\7\3\0\23\7\1\0\2\7\4\0\1\u0223"+
    "\4\7\1\0\6\7\1\0\1\7\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\5\1\1\11\24\1\1\11"+
    "\11\1\4\11\2\1\1\11\2\1\1\0\1\1\3\0"+
    "\7\1\1\0\5\1\1\0\4\1\1\0\15\1\1\0"+
    "\7\1\1\0\3\1\1\11\5\1\1\11\1\0\2\1"+
    "\1\0\4\1\3\0\4\1\1\0\1\1\1\0\3\1"+
    "\3\11\1\1\1\11\5\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\1\0\5\1\1\0\4\1\1\0\7\1"+
    "\1\0\6\1\1\0\3\1\1\0\3\1\1\11\3\1"+
    "\1\0\2\1\3\0\5\1\1\0\2\1\1\0\3\1"+
    "\3\0\1\11\2\0\6\1\1\0\1\1\1\0\3\1"+
    "\1\0\3\1\1\11\3\1\1\0\1\1\1\11\1\1"+
    "\1\0\4\1\1\0\1\1\1\0\3\1\1\11\1\1"+
    "\2\0\6\1\1\0\6\1\1\11\2\1\1\0\6\1"+
    "\1\0\1\11\2\0\7\1\1\11\2\1\1\0\1\1"+
    "\1\11\4\0\5\1\1\0\1\1\1\11\4\1\1\0"+
    "\4\1\1\0\1\1\1\0\2\1\1\0\1\11\1\1"+
    "\1\11\3\1\2\0\4\1\1\11\1\1\1\0\4\1"+
    "\1\0\2\1\2\0\2\1\3\0\4\1\1\0\1\1"+
    "\4\0\5\1\1\0\1\11\4\1\1\0\2\1\1\11"+
    "\1\1\1\11\1\1\4\0\1\1\1\11\1\1\2\0"+
    "\1\1\1\0\4\1\1\0\2\1\2\0\2\1\1\0"+
    "\1\11\4\1\1\11\1\1\3\11\5\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\1\4\0\1\1\2\0\3\1"+
    "\1\0\2\1\2\0\2\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\11\1\1\1\11\1\0\1\1\1\11\1\1"+
    "\2\0\2\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\11\2\1\1\11"+
    "\1\1\3\0\1\1\2\0\2\1\1\11\1\1\3\0"+
    "\2\1\2\0\1\1\2\0\3\1\3\0\2\1\1\0"+
    "\1\1\2\0\3\1\1\11\2\0\3\1\2\0\2\1"+
    "\1\11\1\0\3\1\1\0\3\1\1\0\1\1\2\0"+
    "\2\1\1\11\1\1\1\11\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[547];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        { return new java_cup.runtime.Symbol(SqlParserSym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Неверный символ <"+yytext()+">");
            }
          case 96: break;
          case 2: 
            { /* ignore */
            }
          case 97: break;
          case 3: 
            { return symbol(SqlParserSym.NUMBER, yytext());
            }
          case 98: break;
          case 4: 
            { return symbol(SqlParserSym.IDENTIFIER, SqlParseSupport.dequoteIdentifier(yytext()));
            }
          case 99: break;
          case 5: 
            { return symbol(SqlParserSym.PLUS_MINUS, yytext());
            }
          case 100: break;
          case 6: 
            { return symbol(SqlParserSym.DOT);
            }
          case 101: break;
          case 7: 
            { return symbol(SqlParserSym.DIV);
            }
          case 102: break;
          case 8: 
            { return symbol(SqlParserSym.STAR);
            }
          case 103: break;
          case 9: 
            { return symbol(SqlParserSym.COMMA);
            }
          case 104: break;
          case 10: 
            { return symbol(SqlParserSym.PARENT_L);
            }
          case 105: break;
          case 11: 
            { return symbol(SqlParserSym.PARENT_R);
            }
          case 106: break;
          case 12: 
            { return symbol(SqlParserSym.EQUAL, yytext());
            }
          case 107: break;
          case 13: 
            { return symbol(SqlParserSym.LESS, yytext());
            }
          case 108: break;
          case 14: 
            { return symbol(SqlParserSym.GREAT, yytext());
            }
          case 109: break;
          case 15: 
            { return symbol(SqlParserSym.BACK_QUOTE);
            }
          case 110: break;
          case 16: 
            { return symbol(SqlParserSym.STRING, SqlParseSupport.dequoteLiteralString(yytext()));
            }
          case 111: break;
          case 17: 
            { return symbol(SqlParserSym.OR);
            }
          case 112: break;
          case 18: 
            { return symbol(SqlParserSym.ON);
            }
          case 113: break;
          case 19: 
            { return symbol(SqlParserSym.AS);
            }
          case 114: break;
          case 20: 
            { return symbol(SqlParserSym.TO);
            }
          case 115: break;
          case 21: 
            { return symbol(SqlParserSym.IN);
            }
          case 116: break;
          case 22: 
            { return symbol(SqlParserSym.IS);
            }
          case 117: break;
          case 23: 
            { return symbol(SqlParserSym.CONCAT);
            }
          case 118: break;
          case 24: 
            { if (yytext().startsWith("--+") || yytext().startsWith("/*+")) { return symbol(SqlParserSym.COMMENT, yytext());}
            }
          case 119: break;
          case 25: 
            { return symbol(SqlParserSym.LESS_EQUAL, yytext());
            }
          case 120: break;
          case 26: 
            { return symbol(SqlParserSym.NOT_EQUAL, yytext());
            }
          case 121: break;
          case 27: 
            { return symbol(SqlParserSym.GREAT_EQUAL, yytext());
            }
          case 122: break;
          case 28: 
            { return symbol(SqlParserSym.END);
            }
          case 123: break;
          case 29: 
            { return symbol(SqlParserSym.DAY);
            }
          case 124: break;
          case 30: 
            { return symbol(SqlParserSym.AND);
            }
          case 125: break;
          case 31: 
            { return symbol(SqlParserSym.ALL);
            }
          case 126: break;
          case 32: 
            { return symbol(SqlParserSym.ASC);
            }
          case 127: break;
          case 33: 
            { return symbol(SqlParserSym.NOT);
            }
          case 128: break;
          case 34: 
            { return symbol(SqlParserSym.SET);
            }
          case 129: break;
          case 35: 
            { return symbol(SqlParserSym.CALL);
            }
          case 130: break;
          case 36: 
            { return symbol(SqlParserSym.CASE);
            }
          case 131: break;
          case 37: 
            { return symbol(SqlParserSym.ELSE);
            }
          case 132: break;
          case 38: 
            { return symbol(SqlParserSym.FROM);
            }
          case 133: break;
          case 39: 
            { return symbol(SqlParserSym.ROWS);
            }
          case 134: break;
          case 40: 
            { return symbol(SqlParserSym.ONLY);
            }
          case 135: break;
          case 41: 
            { return symbol(SqlParserSym.OVER);
            }
          case 136: break;
          case 42: 
            { return symbol(SqlParserSym.YEAR);
            }
          case 137: break;
          case 43: 
            { return symbol(SqlParserSym.DESC);
            }
          case 138: break;
          case 44: 
            { return symbol(SqlParserSym.DATE);
            }
          case 139: break;
          case 45: 
            { return symbol(SqlParserSym.TRUE);
            }
          case 140: break;
          case 46: 
            { return symbol(SqlParserSym.TIME);
            }
          case 141: break;
          case 47: 
            { return symbol(SqlParserSym.THEN);
            }
          case 142: break;
          case 48: 
            { return symbol(SqlParserSym.INTO);
            }
          case 143: break;
          case 49: 
            { return symbol(SqlParserSym.NULL);
            }
          case 144: break;
          case 50: 
            { return symbol(SqlParserSym.LEAF);
            }
          case 145: break;
          case 51: 
            { return symbol(SqlParserSym.LIKE);
            }
          case 146: break;
          case 52: 
            { return symbol(SqlParserSym.HOUR);
            }
          case 147: break;
          case 53: 
            { return symbol(SqlParserSym.JOIN_OPERATOR, yytext());
            }
          case 148: break;
          case 54: 
            { return symbol(SqlParserSym.WITH);
            }
          case 149: break;
          case 55: 
            { return symbol(SqlParserSym.WHEN);
            }
          case 150: break;
          case 56: 
            { return symbol(SqlParserSym.CYCLE);
            }
          case 151: break;
          case 57: 
            { return symbol(SqlParserSym.FETCH);
            }
          case 152: break;
          case 58: 
            { return symbol(SqlParserSym.FALSE);
            }
          case 153: break;
          case 59: 
            { return symbol(SqlParserSym.FIRST);
            }
          case 154: break;
          case 60: 
            { return symbol(SqlParserSym.UNION);
            }
          case 155: break;
          case 61: 
            { return symbol(SqlParserSym.MONTH);
            }
          case 156: break;
          case 62: 
            { return symbol(SqlParserSym.MINUS);
            }
          case 157: break;
          case 63: 
            { return symbol(SqlParserSym.WHERE);
            }
          case 158: break;
          case 64: 
            { return symbol(SqlParserSym.EXCEPT);
            }
          case 159: break;
          case 65: 
            { return symbol(SqlParserSym.EXISTS);
            }
          case 160: break;
          case 66: 
            { return symbol(SqlParserSym.ESCAPE);
            }
          case 161: break;
          case 67: 
            { return symbol(SqlParserSym.OFFSET);
            }
          case 162: break;
          case 68: 
            { return symbol(SqlParserSym.UPDATE);
            }
          case 163: break;
          case 69: 
            { return symbol(SqlParserSym.DELETE);
            }
          case 164: break;
          case 70: 
            { return symbol(SqlParserSym.INSERT);
            }
          case 165: break;
          case 71: 
            { return symbol(SqlParserSym.HAVING);
            }
          case 166: break;
          case 72: 
            { return symbol(SqlParserSym.SCALAR);
            }
          case 167: break;
          case 73: 
            { return symbol(SqlParserSym.SECOND);
            }
          case 168: break;
          case 74: 
            { return symbol(SqlParserSym.SELECT);
            }
          case 169: break;
          case 75: 
            { return symbol(SqlParserSym.SUBORD);
            }
          case 170: break;
          case 76: 
            { return symbol(SqlParserSym.MINUTE);
            }
          case 171: break;
          case 77: 
            { return symbol(SqlParserSym.VALUES);
            }
          case 172: break;
          case 78: 
            { return symbol(SqlParserSym.EXTRACT);
            }
          case 173: break;
          case 79: 
            { return symbol(SqlParserSym.BETWEEN);
            }
          case 174: break;
          case 80: 
            { return symbol(SqlParserSym.DEFAULT);
            }
          case 175: break;
          case 81: 
            { return symbol(SqlParserSym.TO_CODE);
            }
          case 176: break;
          case 82: 
            { return symbol(SqlParserSym.GROUP_BY);
            }
          case 177: break;
          case 83: 
            { return symbol(SqlParserSym.ORDER_BY);
            }
          case 178: break;
          case 84: 
            { return symbol(SqlParserSym.DISTINCT);
            }
          case 179: break;
          case 85: 
            { return symbol(SqlParserSym.TIMESTAMP);
            }
          case 180: break;
          case 86: 
            { return symbol(SqlParserSym.INTERSECT);
            }
          case 181: break;
          case 87: 
            { return symbol(SqlParserSym.CROSS_JOIN_OPERATOR, yytext());
            }
          case 182: break;
          case 88: 
            { return symbol(SqlParserSym.REGEXP_MATCH);
            }
          case 183: break;
          case 89: 
            { return symbol(SqlParserSym.PARTITION_BY);
            }
          case 184: break;
          case 90: 
            { return symbol(SqlParserSym.TIMEZONE_HOUR);
            }
          case 185: break;
          case 91: 
            { return symbol(SqlParserSym.LEAF_OR_EQUAL);
            }
          case 186: break;
          case 92: 
            { return symbol(SqlParserSym.SUBORD_DIRECT);
            }
          case 187: break;
          case 93: 
            { return symbol(SqlParserSym.TIMEZONE_MINUTE);
            }
          case 188: break;
          case 94: 
            { return symbol(SqlParserSym.SUBORD_OR_EQUAL);
            }
          case 189: break;
          case 95: 
            { return symbol(SqlParserSym.SUBORD_DIRECT_OR_EQUAL);
            }
          case 190: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
