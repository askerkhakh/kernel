
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ru.sonarplus.kernel.sqlobject.sql_parse;

import java_cup.runtime.*;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.ArrayList;
import org.apache.commons.lang.StringUtils;
import ru.sonarplus.kernel.sqlobject.objects.*;
import ru.sonarplus.kernel.sqlobject.sql_parse.SqlParserException;
import ru.sonarplus.kernel.dbschema.FieldTypeId;
import com.google.common.base.Preconditions;
import ru.sonarplus.kernel.sqlobject.common_utils.CodeValue;
import ru.sonarplus.kernel.sqlobject.expressions.Expr;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SqlParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SqlParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SqlParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SqlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SqlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    lr_parser.unpackFromStrings(new String[] {
    "\000\314\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\103\003\000\002\103\005\000\002\104\003\000" +
    "\002\104\004\000\002\104\005\000\002\104\006\000\002" +
    "\105\003\000\002\105\005\000\002\011\006\000\002\011" +
    "\007\000\002\005\005\000\002\005\006\000\002\006\004" +
    "\000\002\007\003\000\002\007\005\000\002\010\005\000" +
    "\002\010\006\000\002\003\014\000\002\003\013\000\002" +
    "\004\005\000\002\004\006\000\002\076\003\000\002\076" +
    "\003\000\002\076\004\000\002\074\004\000\002\075\005" +
    "\000\002\075\007\000\002\012\003\000\002\012\004\000" +
    "\002\012\004\000\002\012\005\000\002\013\004\000\002" +
    "\014\003\000\002\014\005\000\002\015\003\000\002\015" +
    "\004\000\002\015\004\000\002\016\003\000\002\016\004" +
    "\000\002\017\003\000\002\017\003\000\002\020\007\000" +
    "\002\020\006\000\002\020\005\000\002\020\006\000\002" +
    "\021\004\000\002\021\005\000\002\021\005\000\002\021" +
    "\004\000\002\021\003\000\002\102\004\000\002\102\003" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\023\005\000\002\024" +
    "\003\000\002\024\005\000\002\025\005\000\002\025\004" +
    "\000\002\025\003\000\002\026\004\000\002\027\003\000" +
    "\002\027\005\000\002\027\004\000\002\030\003\000\002" +
    "\030\005\000\002\031\003\000\002\031\004\000\002\032" +
    "\006\000\002\032\004\000\002\033\003\000\002\033\005" +
    "\000\002\033\004\000\002\033\007\000\002\033\006\000" +
    "\002\041\004\000\002\042\004\000\002\042\006\000\002" +
    "\034\004\000\002\035\003\000\002\035\005\000\002\036" +
    "\003\000\002\036\004\000\002\037\012\000\002\040\012" +
    "\000\002\047\003\000\002\047\005\000\002\043\006\000" +
    "\002\043\003\000\002\044\003\000\002\044\006\000\002" +
    "\044\005\000\002\044\010\000\002\045\003\000\002\045" +
    "\004\000\002\045\006\000\002\045\005\000\002\045\006" +
    "\000\002\101\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\003\000\002\101\003\000\002" +
    "\046\010\000\002\046\012\000\002\046\007\000\002\046" +
    "\010\000\002\046\005\000\002\046\006\000\002\046\010" +
    "\000\002\046\010\000\002\046\010\000\002\046\010\000" +
    "\002\046\010\000\002\046\010\000\002\046\007\000\002" +
    "\046\010\000\002\046\006\000\002\046\005\000\002\046" +
    "\006\000\002\046\007\000\002\046\010\000\002\046\011" +
    "\000\002\046\012\000\002\046\007\000\002\046\010\000" +
    "\002\046\005\000\002\046\005\000\002\050\003\000\002" +
    "\051\003\000\002\051\005\000\002\051\005\000\002\052" +
    "\003\000\002\052\005\000\002\052\005\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\004\000\002\053\005\000\002\073\010" +
    "\000\002\073\010\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\005\000\002\054\005\000\002\054\004" +
    "\000\002\054\006\000\002\055\003\000\002\055\003\000" +
    "\002\056\010\000\002\056\006\000\002\057\006\000\002" +
    "\057\007\000\002\060\007\000\002\060\005\000\002\061" +
    "\006\000\002\061\007\000\002\062\006\000\002\063\007" +
    "\000\002\063\006\000\002\063\005\000\002\064\006\000" +
    "\002\064\010\000\002\064\007\000\002\065\004\000\002" +
    "\066\006\000\002\067\004\000\002\070\004\000\002\071" +
    "\004\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\077\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    lr_parser.unpackFromStrings(new String[] {
    "\000\u01ae\000\020\006\004\056\012\061\015\104\014\107" +
    "\022\110\024\112\006\001\002\000\050\010\uffca\026\uffca" +
    "\033\uffca\034\uffca\035\uffca\040\uffca\044\u01ac\045\uffca\053" +
    "\uffca\054\uffca\061\uffca\063\uffca\072\uffca\073\uffca\132\uffca" +
    "\133\uffca\134\uffca\135\uffca\136\u01ad\001\002\000\014\002" +
    "\uffd6\043\uffd6\062\uffd6\125\uffd6\126\uffd6\001\002\000\004" +
    "\133\u01a4\001\002\000\006\006\004\061\015\001\002\000" +
    "\004\002\u01a2\001\002\000\024\002\uffd3\043\uffd3\062\uffd3" +
    "\114\333\116\327\117\331\120\332\125\uffd3\126\uffd3\001" +
    "\002\000\004\133\u018b\001\002\000\004\002\ufffc\001\002" +
    "\000\004\105\u0176\001\002\000\006\006\004\061\015\001" +
    "\002\000\024\002\uffd4\043\uffd4\062\uffd4\114\333\116\327" +
    "\117\331\120\332\125\uffd4\126\uffd4\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\001\001\002\000\004\002\uffff" +
    "\001\002\000\004\007\u0173\001\002\000\012\114\333\116" +
    "\327\117\331\120\332\001\002\000\004\133\u0161\001\002" +
    "\000\044\010\045\026\042\033\057\034\075\035\062\040" +
    "\050\045\063\053\044\054\043\061\051\063\056\072\046" +
    "\073\101\132\074\133\102\134\040\135\064\001\002\000" +
    "\004\002\ufffe\001\002\000\012\002\uffe0\043\036\125\035" +
    "\126\031\001\002\000\010\002\uffdf\125\035\126\031\001" +
    "\002\000\004\127\u012f\001\002\000\004\002\uffe5\001\002" +
    "\000\004\002\uffde\001\002\000\006\002\uffe6\126\031\001" +
    "\002\000\004\135\u012d\001\002\000\044\010\045\026\042" +
    "\033\057\034\075\035\062\040\050\045\063\053\044\054" +
    "\043\061\051\063\056\072\046\073\101\132\074\133\102" +
    "\134\040\135\064\001\002\000\014\002\uffdb\005\uffdb\062" +
    "\uffdb\125\uffdb\126\uffdb\001\002\000\044\010\045\026\042" +
    "\033\057\034\075\035\062\040\050\045\063\053\044\054" +
    "\043\061\051\063\056\072\046\073\101\132\074\133\102" +
    "\134\040\135\064\001\002\000\126\002\uff73\004\uff73\005" +
    "\uff73\007\uff73\010\156\012\uff73\013\uff73\014\uff73\015\uff73" +
    "\016\157\017\uff73\020\uff73\021\uff73\023\uff73\024\uff73\025" +
    "\uff73\027\uff73\031\uff73\032\uff73\036\uff73\042\uff73\043\uff73" +
    "\057\uff73\060\uff73\062\uff73\064\uff73\065\uff73\066\uff73\067" +
    "\uff73\070\uff73\071\uff73\113\uff73\114\uff73\116\uff73\117\uff73" +
    "\120\uff73\125\uff73\126\uff73\133\uff73\134\uff73\137\uff73\140" +
    "\uff73\001\002\000\046\010\045\026\042\033\057\034\075" +
    "\035\062\036\203\040\050\045\063\053\044\054\043\061" +
    "\051\063\056\072\046\073\101\132\074\133\102\134\040" +
    "\135\064\001\002\000\004\132\202\001\002\000\004\132" +
    "\201\001\002\000\126\002\uff56\004\uff56\005\uff56\007\uff56" +
    "\010\uff56\012\uff56\013\uff56\014\uff56\015\uff56\016\uff56\017" +
    "\uff56\020\uff56\021\uff56\023\uff56\024\uff56\025\uff56\027\uff56" +
    "\031\uff56\032\uff56\036\uff56\042\uff56\043\uff56\057\uff56\060" +
    "\uff56\062\uff56\064\uff56\065\uff56\066\uff56\067\uff56\070\uff56" +
    "\071\uff56\113\uff56\114\uff56\116\uff56\117\uff56\120\uff56\125" +
    "\uff56\126\uff56\133\uff56\134\uff56\137\uff56\140\uff56\001\002" +
    "\000\004\133\200\001\002\000\126\002\uff68\004\uff68\005" +
    "\uff68\007\uff68\010\uff68\012\uff68\013\uff68\014\uff68\015\uff68" +
    "\016\uff68\017\uff68\020\uff68\021\uff68\023\uff68\024\uff68\025" +
    "\uff68\027\uff68\031\uff68\032\uff68\036\uff68\042\uff68\043\uff68" +
    "\057\uff68\060\uff68\062\uff68\064\uff68\065\uff68\066\uff68\067" +
    "\uff68\070\uff68\071\uff68\113\uff68\114\uff68\116\uff68\117\uff68" +
    "\120\uff68\125\uff68\126\uff68\133\uff68\134\uff68\137\uff68\140" +
    "\uff68\001\002\000\004\061\175\001\002\000\044\010\045" +
    "\026\042\033\057\034\075\035\062\040\050\045\063\053" +
    "\044\054\043\061\051\063\056\072\046\073\101\132\074" +
    "\133\102\134\040\135\064\001\002\000\126\002\uff63\004" +
    "\uff63\005\uff63\007\uff63\010\uff63\012\uff63\013\uff63\014\uff63" +
    "\015\uff63\016\uff63\017\uff63\020\uff63\021\uff63\023\uff63\024" +
    "\uff63\025\uff63\027\uff63\031\uff63\032\uff63\036\uff63\042\uff63" +
    "\043\uff63\057\uff63\060\uff63\062\uff63\064\uff63\065\uff63\066" +
    "\uff63\067\uff63\070\uff63\071\uff63\113\uff63\114\uff63\116\uff63" +
    "\117\uff63\120\uff63\125\uff63\126\uff63\133\uff63\134\uff63\137" +
    "\uff63\140\uff63\001\002\000\126\002\uff64\004\uff64\005\uff64" +
    "\007\uff64\010\uff64\012\uff64\013\uff64\014\uff64\015\uff64\016" +
    "\uff64\017\uff64\020\uff64\021\uff64\023\uff64\024\uff64\025\uff64" +
    "\027\uff64\031\uff64\032\uff64\036\uff64\042\uff64\043\uff64\057" +
    "\uff64\060\uff64\062\uff64\064\uff64\065\uff64\066\uff64\067\uff64" +
    "\070\uff64\071\uff64\113\uff64\114\uff64\116\uff64\117\uff64\120" +
    "\uff64\125\uff64\126\uff64\133\uff64\134\uff64\137\uff64\140\uff64" +
    "\001\002\000\014\002\uffdc\005\171\062\uffdc\125\uffdc\126" +
    "\uffdc\001\002\000\126\002\uff6c\004\uff6c\005\uff6c\007\uff6c" +
    "\010\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\016\uff6c\017" +
    "\uff6c\020\uff6c\021\uff6c\023\uff6c\024\uff6c\025\uff6c\027\uff6c" +
    "\031\uff6c\032\uff6c\036\uff6c\042\uff6c\043\uff6c\057\uff6c\060" +
    "\uff6c\062\uff6c\064\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c" +
    "\071\uff6c\113\uff6c\114\uff6c\116\uff6c\117\uff6c\120\uff6c\125" +
    "\uff6c\126\uff6c\133\uff6c\134\uff6c\137\uff6c\140\uff6c\001\002" +
    "\000\004\061\166\001\002\000\126\002\uff3b\004\uff3b\005" +
    "\uff3b\007\uff3b\010\uff3b\012\uff3b\013\uff3b\014\uff3b\015\uff3b" +
    "\016\uff3b\017\uff3b\020\uff3b\021\uff3b\023\uff3b\024\uff3b\025" +
    "\uff3b\027\uff3b\031\uff3b\032\uff3b\036\uff3b\042\uff3b\043\uff3b" +
    "\057\uff3b\060\uff3b\062\uff3b\064\uff3b\065\uff3b\066\uff3b\067" +
    "\uff3b\070\uff3b\071\uff3b\113\uff3b\114\uff3b\116\uff3b\117\uff3b" +
    "\120\uff3b\125\uff3b\126\uff3b\133\uff3b\134\uff3b\137\uff3b\140" +
    "\uff3b\001\002\000\126\002\uff69\004\uff69\005\uff69\007\uff69" +
    "\010\uff69\012\uff69\013\uff69\014\uff69\015\uff69\016\uff69\017" +
    "\uff69\020\uff69\021\uff69\023\uff69\024\uff69\025\uff69\027\uff69" +
    "\031\uff69\032\uff69\036\uff69\042\uff69\043\uff69\057\uff69\060" +
    "\uff69\062\uff69\064\uff69\065\uff69\066\uff69\067\uff69\070\uff69" +
    "\071\uff69\113\uff69\114\uff69\116\uff69\117\uff69\120\uff69\125" +
    "\uff69\126\uff69\133\uff69\134\uff69\137\uff69\140\uff69\001\002" +
    "\000\126\002\uff70\004\uff70\005\uff70\007\uff70\010\uff70\012" +
    "\uff70\013\uff70\014\uff70\015\uff70\016\uff70\017\uff70\020\uff70" +
    "\021\uff70\023\uff70\024\uff70\025\uff70\027\uff70\031\uff70\032" +
    "\uff70\036\uff70\042\uff70\043\uff70\057\uff70\060\uff70\062\uff70" +
    "\064\uff70\065\uff70\066\uff70\067\uff70\070\uff70\071\uff70\113" +
    "\uff70\114\uff70\116\uff70\117\uff70\120\uff70\125\uff70\126\uff70" +
    "\133\uff70\134\uff70\137\uff70\140\uff70\001\002\000\126\002" +
    "\uff37\004\uff37\005\uff37\007\uff37\010\uff37\012\uff37\013\uff37" +
    "\014\uff37\015\uff37\016\uff37\017\uff37\020\uff37\021\uff37\023" +
    "\uff37\024\uff37\025\uff37\027\uff37\031\uff37\032\uff37\036\uff37" +
    "\042\uff37\043\uff37\057\uff37\060\uff37\062\uff37\064\uff37\065" +
    "\uff37\066\uff37\067\uff37\070\uff37\071\uff37\113\uff37\114\uff37" +
    "\116\uff37\117\uff37\120\uff37\125\uff37\126\uff37\133\uff37\134" +
    "\uff37\137\uff37\140\uff37\001\002\000\004\132\165\001\002" +
    "\000\126\002\uff39\004\uff39\005\uff39\007\uff39\010\uff39\012" +
    "\uff39\013\uff39\014\uff39\015\uff39\016\uff39\017\uff39\020\uff39" +
    "\021\uff39\023\uff39\024\uff39\025\uff39\027\uff39\031\uff39\032" +
    "\uff39\036\uff39\042\uff39\043\uff39\057\uff39\060\uff39\062\uff39" +
    "\064\uff39\065\uff39\066\uff39\067\uff39\070\uff39\071\uff39\113" +
    "\uff39\114\uff39\116\uff39\117\uff39\120\uff39\125\uff39\126\uff39" +
    "\133\uff39\134\uff39\137\uff39\140\uff39\001\002\000\126\002" +
    "\uff6b\004\uff6b\005\uff6b\007\uff6b\010\uff6b\012\uff6b\013\uff6b" +
    "\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\023" +
    "\uff6b\024\uff6b\025\uff6b\027\uff6b\031\uff6b\032\uff6b\036\uff6b" +
    "\042\uff6b\043\uff6b\057\uff6b\060\uff6b\062\uff6b\064\uff6b\065" +
    "\uff6b\066\uff6b\067\uff6b\070\uff6b\071\uff6b\113\uff6b\114\uff6b" +
    "\116\uff6b\117\uff6b\120\uff6b\125\uff6b\126\uff6b\133\uff6b\134" +
    "\uff6b\137\uff6b\140\uff6b\001\002\000\126\002\uff50\004\uff50" +
    "\005\uff50\007\uff50\010\uff50\012\uff50\013\uff50\014\uff50\015" +
    "\uff50\016\uff50\017\uff50\020\uff50\021\uff50\023\uff50\024\uff50" +
    "\025\uff50\027\uff50\031\uff50\032\uff50\036\uff50\042\uff50\043" +
    "\uff50\057\uff50\060\uff50\062\uff50\064\uff50\065\uff50\066\uff50" +
    "\067\uff50\070\uff50\071\uff50\113\uff50\114\uff50\116\uff50\117" +
    "\uff50\120\uff50\125\uff50\126\uff50\133\uff50\134\uff50\137\uff50" +
    "\140\uff50\001\002\000\126\002\uff65\004\uff65\005\uff65\007" +
    "\uff65\010\uff65\012\uff65\013\uff65\014\uff65\015\uff65\016\uff65" +
    "\017\uff65\020\uff65\021\uff65\023\uff65\024\uff65\025\uff65\027" +
    "\uff65\031\uff65\032\uff65\036\uff65\042\uff65\043\uff65\057\uff65" +
    "\060\uff65\062\uff65\064\uff65\065\uff65\066\uff65\067\uff65\070" +
    "\uff65\071\uff65\113\uff65\114\uff65\116\uff65\117\uff65\120\uff65" +
    "\125\uff65\126\uff65\133\uff65\134\uff65\137\uff65\140\uff65\001" +
    "\002\000\126\002\uff66\004\uff66\005\uff66\007\uff66\010\uff66" +
    "\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66\017\uff66\020" +
    "\uff66\021\uff66\023\uff66\024\uff66\025\uff66\027\uff66\031\uff66" +
    "\032\uff66\036\uff66\042\uff66\043\uff66\057\uff66\060\uff66\062" +
    "\uff66\064\uff66\065\uff66\066\uff66\067\uff66\070\uff66\071\uff66" +
    "\113\uff66\114\uff66\116\uff66\117\uff66\120\uff66\125\uff66\126" +
    "\uff66\133\uff66\134\uff66\137\uff66\140\uff66\001\002\000\020" +
    "\002\uffd9\005\uffd9\031\163\032\164\062\uffd9\125\uffd9\126" +
    "\uffd9\001\002\000\126\002\uff51\004\uff51\005\uff51\007\uff51" +
    "\010\uff51\012\uff51\013\uff51\014\uff51\015\uff51\016\uff51\017" +
    "\uff51\020\uff51\021\uff51\023\uff51\024\uff51\025\uff51\027\uff51" +
    "\031\uff51\032\uff51\036\uff51\042\uff51\043\uff51\057\uff51\060" +
    "\uff51\062\uff51\064\uff51\065\uff51\066\uff51\067\uff51\070\uff51" +
    "\071\uff51\113\uff51\114\uff51\116\uff51\117\uff51\120\uff51\125" +
    "\uff51\126\uff51\133\uff51\134\uff51\137\uff51\140\uff51\001\002" +
    "\000\122\002\uff74\004\uff74\005\uff74\007\uff74\012\uff74\013" +
    "\uff74\014\uff74\015\uff74\017\153\020\uff74\021\uff74\023\uff74" +
    "\024\uff74\025\uff74\027\uff74\031\uff74\032\uff74\036\uff74\042" +
    "\uff74\043\uff74\057\uff74\060\uff74\062\uff74\064\uff74\065\uff74" +
    "\066\uff74\067\uff74\070\uff74\071\uff74\113\uff74\114\uff74\116" +
    "\uff74\117\uff74\120\uff74\125\uff74\126\uff74\133\uff74\134\154" +
    "\137\uff74\140\uff74\001\002\000\126\002\uff38\004\uff38\005" +
    "\uff38\007\uff38\010\uff38\012\uff38\013\uff38\014\uff38\015\uff38" +
    "\016\uff38\017\uff38\020\uff38\021\uff38\023\uff38\024\uff38\025" +
    "\uff38\027\uff38\031\uff38\032\uff38\036\uff38\042\uff38\043\uff38" +
    "\057\uff38\060\uff38\062\uff38\064\uff38\065\uff38\066\uff38\067" +
    "\uff38\070\uff38\071\uff38\113\uff38\114\uff38\116\uff38\117\uff38" +
    "\120\uff38\125\uff38\126\uff38\133\uff38\134\uff38\137\uff38\140" +
    "\uff38\001\002\000\126\002\uff3a\004\uff3a\005\uff3a\007\uff3a" +
    "\010\uff3a\012\uff3a\013\uff3a\014\uff3a\015\uff3a\016\uff3a\017" +
    "\uff3a\020\uff3a\021\uff3a\023\uff3a\024\uff3a\025\uff3a\027\uff3a" +
    "\031\uff3a\032\uff3a\036\uff3a\042\uff3a\043\uff3a\057\uff3a\060" +
    "\uff3a\062\uff3a\064\uff3a\065\uff3a\066\uff3a\067\uff3a\070\uff3a" +
    "\071\uff3a\113\uff3a\114\uff3a\116\uff3a\117\uff3a\120\uff3a\125" +
    "\uff3a\126\uff3a\133\uff3a\134\uff3a\137\uff3a\140\uff3a\001\002" +
    "\000\130\002\uff6a\004\uff6a\005\uff6a\007\uff6a\010\uff6a\012" +
    "\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a" +
    "\021\uff6a\023\uff6a\024\uff6a\025\uff6a\027\uff6a\030\142\031" +
    "\uff6a\032\uff6a\036\uff6a\042\uff6a\043\uff6a\057\uff6a\060\uff6a" +
    "\062\uff6a\064\uff6a\065\uff6a\066\uff6a\067\uff6a\070\uff6a\071" +
    "\uff6a\113\uff6a\114\uff6a\116\uff6a\117\uff6a\120\uff6a\125\uff6a" +
    "\126\uff6a\133\uff6a\134\uff6a\137\uff6a\140\uff6a\001\002\000" +
    "\126\002\uff67\004\uff67\005\uff67\007\uff67\010\uff67\012\uff67" +
    "\013\uff67\014\uff67\015\uff67\016\uff67\017\uff67\020\uff67\021" +
    "\uff67\023\uff67\024\uff67\025\uff67\027\uff67\031\uff67\032\uff67" +
    "\036\uff67\042\uff67\043\uff67\057\uff67\060\uff67\062\uff67\064" +
    "\uff67\065\uff67\066\uff67\067\uff67\070\uff67\071\uff67\113\uff67" +
    "\114\uff67\116\uff67\117\uff67\120\uff67\125\uff67\126\uff67\133" +
    "\uff67\134\uff67\137\uff67\140\uff67\001\002\000\126\002\uff6d" +
    "\004\uff6d\005\uff6d\007\uff6d\010\uff6d\012\uff6d\013\uff6d\014" +
    "\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d\023\uff6d" +
    "\024\uff6d\025\uff6d\027\uff6d\031\uff6d\032\uff6d\036\uff6d\042" +
    "\uff6d\043\uff6d\057\uff6d\060\uff6d\062\uff6d\064\uff6d\065\uff6d" +
    "\066\uff6d\067\uff6d\070\uff6d\071\uff6d\113\uff6d\114\uff6d\116" +
    "\uff6d\117\uff6d\120\uff6d\125\uff6d\126\uff6d\133\uff6d\134\uff6d" +
    "\137\uff6d\140\uff6d\001\002\000\004\061\122\001\002\000" +
    "\132\002\uff57\004\uff57\005\uff57\007\uff57\010\uff57\011\104" +
    "\012\uff57\013\uff57\014\uff57\015\uff57\016\uff57\017\uff57\020" +
    "\uff57\021\uff57\023\uff57\024\uff57\025\uff57\027\uff57\031\uff57" +
    "\032\uff57\036\uff57\042\uff57\043\uff57\057\uff57\060\uff57\061" +
    "\103\062\uff57\064\uff57\065\uff57\066\uff57\067\uff57\070\uff57" +
    "\071\uff57\113\uff57\114\uff57\116\uff57\117\uff57\120\uff57\125" +
    "\uff57\126\uff57\133\uff57\134\uff57\137\uff57\140\uff57\001\002" +
    "\000\050\010\045\026\042\033\057\034\075\035\062\040" +
    "\050\044\113\045\063\053\044\054\043\061\051\062\112" +
    "\063\056\072\046\073\101\132\074\133\102\134\040\135" +
    "\064\001\002\000\010\010\105\072\106\133\107\001\002" +
    "\000\126\002\uff54\004\uff54\005\uff54\007\uff54\010\uff54\012" +
    "\uff54\013\uff54\014\uff54\015\uff54\016\uff54\017\uff54\020\uff54" +
    "\021\uff54\023\uff54\024\uff54\025\uff54\027\uff54\031\uff54\032" +
    "\uff54\036\uff54\042\uff54\043\uff54\057\uff54\060\uff54\062\uff54" +
    "\064\uff54\065\uff54\066\uff54\067\uff54\070\uff54\071\uff54\113" +
    "\uff54\114\uff54\116\uff54\117\uff54\120\uff54\125\uff54\126\uff54" +
    "\133\uff54\134\uff54\137\uff54\140\uff54\001\002\000\004\133" +
    "\110\001\002\000\126\002\uff55\004\uff55\005\uff55\007\uff55" +
    "\010\uff55\012\uff55\013\uff55\014\uff55\015\uff55\016\uff55\017" +
    "\uff55\020\uff55\021\uff55\023\uff55\024\uff55\025\uff55\027\uff55" +
    "\031\uff55\032\uff55\036\uff55\042\uff55\043\uff55\057\uff55\060" +
    "\uff55\062\uff55\064\uff55\065\uff55\066\uff55\067\uff55\070\uff55" +
    "\071\uff55\113\uff55\114\uff55\116\uff55\117\uff55\120\uff55\125" +
    "\uff55\126\uff55\133\uff55\134\uff55\137\uff55\140\uff55\001\002" +
    "\000\126\002\uff52\004\uff52\005\uff52\007\uff52\010\uff52\012" +
    "\uff52\013\uff52\014\uff52\015\uff52\016\uff52\017\uff52\020\uff52" +
    "\021\uff52\023\uff52\024\uff52\025\uff52\027\uff52\031\uff52\032" +
    "\uff52\036\uff52\042\uff52\043\uff52\057\uff52\060\uff52\062\uff52" +
    "\064\uff52\065\uff52\066\uff52\067\uff52\070\uff52\071\uff52\113" +
    "\uff52\114\uff52\116\uff52\117\uff52\120\uff52\125\uff52\126\uff52" +
    "\133\uff52\134\uff52\137\uff52\140\uff52\001\002\000\006\005" +
    "\116\062\121\001\002\000\130\002\uff44\004\uff44\005\uff44" +
    "\007\uff44\010\uff44\012\uff44\013\uff44\014\uff44\015\uff44\016" +
    "\uff44\017\uff44\020\uff44\021\uff44\023\uff44\024\uff44\025\uff44" +
    "\027\uff44\030\uff44\031\uff44\032\uff44\036\uff44\042\uff44\043" +
    "\uff44\057\uff44\060\uff44\062\uff44\064\uff44\065\uff44\066\uff44" +
    "\067\uff44\070\uff44\071\uff44\113\uff44\114\uff44\116\uff44\117" +
    "\uff44\120\uff44\125\uff44\126\uff44\133\uff44\134\uff44\137\uff44" +
    "\140\uff44\001\002\000\044\010\045\026\042\033\057\034" +
    "\075\035\062\040\050\045\063\053\044\054\043\061\051" +
    "\063\056\072\046\073\101\132\074\133\102\134\040\135" +
    "\064\001\002\000\030\002\uffa0\005\uffa0\042\uffa0\043\uffa0" +
    "\062\uffa0\114\uffa0\116\uffa0\117\uffa0\120\uffa0\125\uffa0\126" +
    "\uffa0\001\002\000\006\005\116\062\117\001\002\000\044" +
    "\010\045\026\042\033\057\034\075\035\062\040\050\045" +
    "\063\053\044\054\043\061\051\063\056\072\046\073\101" +
    "\132\074\133\102\134\040\135\064\001\002\000\130\002" +
    "\uff46\004\uff46\005\uff46\007\uff46\010\uff46\012\uff46\013\uff46" +
    "\014\uff46\015\uff46\016\uff46\017\uff46\020\uff46\021\uff46\023" +
    "\uff46\024\uff46\025\uff46\027\uff46\030\uff46\031\uff46\032\uff46" +
    "\036\uff46\042\uff46\043\uff46\057\uff46\060\uff46\062\uff46\064" +
    "\uff46\065\uff46\066\uff46\067\uff46\070\uff46\071\uff46\113\uff46" +
    "\114\uff46\116\uff46\117\uff46\120\uff46\125\uff46\126\uff46\133" +
    "\uff46\134\uff46\137\uff46\140\uff46\001\002\000\030\002\uff9f" +
    "\005\uff9f\042\uff9f\043\uff9f\062\uff9f\114\uff9f\116\uff9f\117" +
    "\uff9f\120\uff9f\125\uff9f\126\uff9f\001\002\000\130\002\uff45" +
    "\004\uff45\005\uff45\007\uff45\010\uff45\012\uff45\013\uff45\014" +
    "\uff45\015\uff45\016\uff45\017\uff45\020\uff45\021\uff45\023\uff45" +
    "\024\uff45\025\uff45\027\uff45\030\uff45\031\uff45\032\uff45\036" +
    "\uff45\042\uff45\043\uff45\057\uff45\060\uff45\062\uff45\064\uff45" +
    "\065\uff45\066\uff45\067\uff45\070\uff45\071\uff45\113\uff45\114" +
    "\uff45\116\uff45\117\uff45\120\uff45\125\uff45\126\uff45\133\uff45" +
    "\134\uff45\137\uff45\140\uff45\001\002\000\022\074\131\075" +
    "\130\076\127\077\126\100\125\101\123\102\124\103\132" +
    "\001\002\000\004\007\uff5a\001\002\000\004\007\uff59\001" +
    "\002\000\004\007\uff5b\001\002\000\004\007\uff5c\001\002" +
    "\000\004\007\uff5d\001\002\000\004\007\uff5e\001\002\000" +
    "\004\007\137\001\002\000\004\007\uff58\001\002\000\004" +
    "\007\134\001\002\000\044\010\045\026\042\033\057\034" +
    "\075\035\062\040\050\045\063\053\044\054\043\061\051" +
    "\063\056\072\046\073\101\132\074\133\102\134\040\135" +
    "\064\001\002\000\004\062\136\001\002\000\126\002\uff5f" +
    "\004\uff5f\005\uff5f\007\uff5f\010\uff5f\012\uff5f\013\uff5f\014" +
    "\uff5f\015\uff5f\016\uff5f\017\uff5f\020\uff5f\021\uff5f\023\uff5f" +
    "\024\uff5f\025\uff5f\027\uff5f\031\uff5f\032\uff5f\036\uff5f\042" +
    "\uff5f\043\uff5f\057\uff5f\060\uff5f\062\uff5f\064\uff5f\065\uff5f" +
    "\066\uff5f\067\uff5f\070\uff5f\071\uff5f\113\uff5f\114\uff5f\116" +
    "\uff5f\117\uff5f\120\uff5f\125\uff5f\126\uff5f\133\uff5f\134\uff5f" +
    "\137\uff5f\140\uff5f\001\002\000\044\010\045\026\042\033" +
    "\057\034\075\035\062\040\050\045\063\053\044\054\043" +
    "\061\051\063\056\072\046\073\101\132\074\133\102\134" +
    "\040\135\064\001\002\000\004\062\141\001\002\000\126" +
    "\002\uff60\004\uff60\005\uff60\007\uff60\010\uff60\012\uff60\013" +
    "\uff60\014\uff60\015\uff60\016\uff60\017\uff60\020\uff60\021\uff60" +
    "\023\uff60\024\uff60\025\uff60\027\uff60\031\uff60\032\uff60\036" +
    "\uff60\042\uff60\043\uff60\057\uff60\060\uff60\062\uff60\064\uff60" +
    "\065\uff60\066\uff60\067\uff60\070\uff60\071\uff60\113\uff60\114" +
    "\uff60\116\uff60\117\uff60\120\uff60\125\uff60\126\uff60\133\uff60" +
    "\134\uff60\137\uff60\140\uff60\001\002\000\004\061\143\001" +
    "\002\000\006\046\145\062\144\001\002\000\126\002\uff43" +
    "\004\uff43\005\uff43\007\uff43\010\uff43\012\uff43\013\uff43\014" +
    "\uff43\015\uff43\016\uff43\017\uff43\020\uff43\021\uff43\023\uff43" +
    "\024\uff43\025\uff43\027\uff43\031\uff43\032\uff43\036\uff43\042" +
    "\uff43\043\uff43\057\uff43\060\uff43\062\uff43\064\uff43\065\uff43" +
    "\066\uff43\067\uff43\070\uff43\071\uff43\113\uff43\114\uff43\116" +
    "\uff43\117\uff43\120\uff43\125\uff43\126\uff43\133\uff43\134\uff43" +
    "\137\uff43\140\uff43\001\002\000\044\010\045\026\042\033" +
    "\057\034\075\035\062\040\050\045\063\053\044\054\043" +
    "\061\051\063\056\072\046\073\101\132\074\133\102\134" +
    "\040\135\064\001\002\000\006\043\036\062\147\001\002" +
    "\000\126\002\uff41\004\uff41\005\uff41\007\uff41\010\uff41\012" +
    "\uff41\013\uff41\014\uff41\015\uff41\016\uff41\017\uff41\020\uff41" +
    "\021\uff41\023\uff41\024\uff41\025\uff41\027\uff41\031\uff41\032" +
    "\uff41\036\uff41\042\uff41\043\uff41\057\uff41\060\uff41\062\uff41" +
    "\064\uff41\065\uff41\066\uff41\067\uff41\070\uff41\071\uff41\113" +
    "\uff41\114\uff41\116\uff41\117\uff41\120\uff41\125\uff41\126\uff41" +
    "\133\uff41\134\uff41\137\uff41\140\uff41\001\002\000\004\062" +
    "\151\001\002\000\126\002\uff42\004\uff42\005\uff42\007\uff42" +
    "\010\uff42\012\uff42\013\uff42\014\uff42\015\uff42\016\uff42\017" +
    "\uff42\020\uff42\021\uff42\023\uff42\024\uff42\025\uff42\027\uff42" +
    "\031\uff42\032\uff42\036\uff42\042\uff42\043\uff42\057\uff42\060" +
    "\uff42\062\uff42\064\uff42\065\uff42\066\uff42\067\uff42\070\uff42" +
    "\071\uff42\113\uff42\114\uff42\116\uff42\117\uff42\120\uff42\125" +
    "\uff42\126\uff42\133\uff42\134\uff42\137\uff42\140\uff42\001\002" +
    "\000\010\005\116\043\uff40\062\uff40\001\002\000\044\010" +
    "\045\026\042\033\057\034\075\035\062\040\050\045\063" +
    "\053\044\054\043\061\051\063\056\072\046\073\101\132" +
    "\074\133\102\134\040\135\064\001\002\000\044\010\045" +
    "\026\042\033\057\034\075\035\062\040\050\045\063\053" +
    "\044\054\043\061\051\063\056\072\046\073\101\132\074" +
    "\133\102\134\040\135\064\001\002\000\126\002\uff72\004" +
    "\uff72\005\uff72\007\uff72\010\156\012\uff72\013\uff72\014\uff72" +
    "\015\uff72\016\157\017\uff72\020\uff72\021\uff72\023\uff72\024" +
    "\uff72\025\uff72\027\uff72\031\uff72\032\uff72\036\uff72\042\uff72" +
    "\043\uff72\057\uff72\060\uff72\062\uff72\064\uff72\065\uff72\066" +
    "\uff72\067\uff72\070\uff72\071\uff72\113\uff72\114\uff72\116\uff72" +
    "\117\uff72\120\uff72\125\uff72\126\uff72\133\uff72\134\uff72\137" +
    "\uff72\140\uff72\001\002\000\044\010\045\026\042\033\057" +
    "\034\075\035\062\040\050\045\063\053\044\054\043\061" +
    "\051\063\056\072\046\073\101\132\074\133\102\134\040" +
    "\135\064\001\002\000\044\010\045\026\042\033\057\034" +
    "\075\035\062\040\050\045\063\053\044\054\043\061\051" +
    "\063\056\072\046\073\101\132\074\133\102\134\040\135" +
    "\064\001\002\000\126\002\uff6e\004\uff6e\005\uff6e\007\uff6e" +
    "\010\uff6e\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\017" +
    "\uff6e\020\uff6e\021\uff6e\023\uff6e\024\uff6e\025\uff6e\027\uff6e" +
    "\031\uff6e\032\uff6e\036\uff6e\042\uff6e\043\uff6e\057\uff6e\060" +
    "\uff6e\062\uff6e\064\uff6e\065\uff6e\066\uff6e\067\uff6e\070\uff6e" +
    "\071\uff6e\113\uff6e\114\uff6e\116\uff6e\117\uff6e\120\uff6e\125" +
    "\uff6e\126\uff6e\133\uff6e\134\uff6e\137\uff6e\140\uff6e\001\002" +
    "\000\126\002\uff6f\004\uff6f\005\uff6f\007\uff6f\010\uff6f\012" +
    "\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020\uff6f" +
    "\021\uff6f\023\uff6f\024\uff6f\025\uff6f\027\uff6f\031\uff6f\032" +
    "\uff6f\036\uff6f\042\uff6f\043\uff6f\057\uff6f\060\uff6f\062\uff6f" +
    "\064\uff6f\065\uff6f\066\uff6f\067\uff6f\070\uff6f\071\uff6f\113" +
    "\uff6f\114\uff6f\116\uff6f\117\uff6f\120\uff6f\125\uff6f\126\uff6f" +
    "\133\uff6f\134\uff6f\137\uff6f\140\uff6f\001\002\000\126\002" +
    "\uff71\004\uff71\005\uff71\007\uff71\010\156\012\uff71\013\uff71" +
    "\014\uff71\015\uff71\016\157\017\uff71\020\uff71\021\uff71\023" +
    "\uff71\024\uff71\025\uff71\027\uff71\031\uff71\032\uff71\036\uff71" +
    "\042\uff71\043\uff71\057\uff71\060\uff71\062\uff71\064\uff71\065" +
    "\uff71\066\uff71\067\uff71\070\uff71\071\uff71\113\uff71\114\uff71" +
    "\116\uff71\117\uff71\120\uff71\125\uff71\126\uff71\133\uff71\134" +
    "\uff71\137\uff71\140\uff71\001\002\000\014\002\uffd8\005\uffd8" +
    "\062\uffd8\125\uffd8\126\uffd8\001\002\000\014\002\uffd7\005" +
    "\uffd7\062\uffd7\125\uffd7\126\uffd7\001\002\000\126\002\uff3c" +
    "\004\uff3c\005\uff3c\007\uff3c\010\uff3c\012\uff3c\013\uff3c\014" +
    "\uff3c\015\uff3c\016\uff3c\017\uff3c\020\uff3c\021\uff3c\023\uff3c" +
    "\024\uff3c\025\uff3c\027\uff3c\031\uff3c\032\uff3c\036\uff3c\042" +
    "\uff3c\043\uff3c\057\uff3c\060\uff3c\062\uff3c\064\uff3c\065\uff3c" +
    "\066\uff3c\067\uff3c\070\uff3c\071\uff3c\113\uff3c\114\uff3c\116" +
    "\uff3c\117\uff3c\120\uff3c\125\uff3c\126\uff3c\133\uff3c\134\uff3c" +
    "\137\uff3c\140\uff3c\001\002\000\004\132\167\001\002\000" +
    "\004\062\170\001\002\000\126\002\uff3f\004\uff3f\005\uff3f" +
    "\007\uff3f\010\uff3f\012\uff3f\013\uff3f\014\uff3f\015\uff3f\016" +
    "\uff3f\017\uff3f\020\uff3f\021\uff3f\023\uff3f\024\uff3f\025\uff3f" +
    "\027\uff3f\031\uff3f\032\uff3f\036\uff3f\042\uff3f\043\uff3f\057" +
    "\uff3f\060\uff3f\062\uff3f\064\uff3f\065\uff3f\066\uff3f\067\uff3f" +
    "\070\uff3f\071\uff3f\113\uff3f\114\uff3f\116\uff3f\117\uff3f\120" +
    "\uff3f\125\uff3f\126\uff3f\133\uff3f\134\uff3f\137\uff3f\140\uff3f" +
    "\001\002\000\044\010\045\026\042\033\057\034\075\035" +
    "\062\040\050\045\063\053\044\054\043\061\051\063\056" +
    "\072\046\073\101\132\074\133\102\134\040\135\064\001" +
    "\002\000\014\002\uffda\005\uffda\062\uffda\125\uffda\126\uffda" +
    "\001\002\000\004\062\174\001\002\000\126\002\uff61\004" +
    "\uff61\005\uff61\007\uff61\010\uff61\012\uff61\013\uff61\014\uff61" +
    "\015\uff61\016\uff61\017\uff61\020\uff61\021\uff61\023\uff61\024" +
    "\uff61\025\uff61\027\uff61\031\uff61\032\uff61\036\uff61\042\uff61" +
    "\043\uff61\057\uff61\060\uff61\062\uff61\064\uff61\065\uff61\066" +
    "\uff61\067\uff61\070\uff61\071\uff61\113\uff61\114\uff61\116\uff61" +
    "\117\uff61\120\uff61\125\uff61\126\uff61\133\uff61\134\uff61\137" +
    "\uff61\140\uff61\001\002\000\006\006\004\061\015\001\002" +
    "\000\004\062\177\001\002\000\126\002\uff47\004\uff47\005" +
    "\uff47\007\uff47\010\uff47\012\uff47\013\uff47\014\uff47\015\uff47" +
    "\016\uff47\017\uff47\020\uff47\021\uff47\023\uff47\024\uff47\025" +
    "\uff47\027\uff47\031\uff47\032\uff47\036\uff47\042\uff47\043\uff47" +
    "\057\uff47\060\uff47\062\uff47\064\uff47\065\uff47\066\uff47\067" +
    "\uff47\070\uff47\071\uff47\113\uff47\114\uff47\116\uff47\117\uff47" +
    "\120\uff47\125\uff47\126\uff47\133\uff47\134\uff47\137\uff47\140" +
    "\uff47\001\002\000\126\002\uff53\004\uff53\005\uff53\007\uff53" +
    "\010\uff53\012\uff53\013\uff53\014\uff53\015\uff53\016\uff53\017" +
    "\uff53\020\uff53\021\uff53\023\uff53\024\uff53\025\uff53\027\uff53" +
    "\031\uff53\032\uff53\036\uff53\042\uff53\043\uff53\057\uff53\060" +
    "\uff53\062\uff53\064\uff53\065\uff53\066\uff53\067\uff53\070\uff53" +
    "\071\uff53\113\uff53\114\uff53\116\uff53\117\uff53\120\uff53\125" +
    "\uff53\126\uff53\133\uff53\134\uff53\137\uff53\140\uff53\001\002" +
    "\000\126\002\uff3e\004\uff3e\005\uff3e\007\uff3e\010\uff3e\012" +
    "\uff3e\013\uff3e\014\uff3e\015\uff3e\016\uff3e\017\uff3e\020\uff3e" +
    "\021\uff3e\023\uff3e\024\uff3e\025\uff3e\027\uff3e\031\uff3e\032" +
    "\uff3e\036\uff3e\042\uff3e\043\uff3e\057\uff3e\060\uff3e\062\uff3e" +
    "\064\uff3e\065\uff3e\066\uff3e\067\uff3e\070\uff3e\071\uff3e\113" +
    "\uff3e\114\uff3e\116\uff3e\117\uff3e\120\uff3e\125\uff3e\126\uff3e" +
    "\133\uff3e\134\uff3e\137\uff3e\140\uff3e\001\002\000\126\002" +
    "\uff3d\004\uff3d\005\uff3d\007\uff3d\010\uff3d\012\uff3d\013\uff3d" +
    "\014\uff3d\015\uff3d\016\uff3d\017\uff3d\020\uff3d\021\uff3d\023" +
    "\uff3d\024\uff3d\025\uff3d\027\uff3d\031\uff3d\032\uff3d\036\uff3d" +
    "\042\uff3d\043\uff3d\057\uff3d\060\uff3d\062\uff3d\064\uff3d\065" +
    "\uff3d\066\uff3d\067\uff3d\070\uff3d\071\uff3d\113\uff3d\114\uff3d" +
    "\116\uff3d\117\uff3d\120\uff3d\125\uff3d\126\uff3d\133\uff3d\134" +
    "\uff3d\137\uff3d\140\uff3d\001\002\000\066\010\045\015\231" +
    "\026\042\033\057\034\075\035\062\037\234\040\050\041" +
    "\226\045\063\047\237\050\236\051\244\052\240\053\044" +
    "\054\043\055\230\061\232\063\056\072\046\073\101\124" +
    "\242\132\074\133\102\134\040\135\064\001\002\000\010" +
    "\025\225\027\223\036\224\001\002\000\004\036\207\001" +
    "\002\000\010\025\215\027\213\036\214\001\002\000\044" +
    "\010\045\026\042\033\057\034\075\035\062\040\050\045" +
    "\063\053\044\054\043\061\051\063\056\072\046\073\101" +
    "\132\074\133\102\134\040\135\064\001\002\000\004\060" +
    "\211\001\002\000\044\010\045\026\042\033\057\034\075" +
    "\035\062\040\050\045\063\053\044\054\043\061\051\063" +
    "\056\072\046\073\101\132\074\133\102\134\040\135\064" +
    "\001\002\000\010\025\uff4d\027\uff4d\036\uff4d\001\002\000" +
    "\044\010\045\026\042\033\057\034\075\035\062\040\050" +
    "\045\063\053\044\054\043\061\051\063\056\072\046\073" +
    "\101\132\074\133\102\134\040\135\064\001\002\000\044" +
    "\010\045\026\042\033\057\034\075\035\062\040\050\045" +
    "\063\053\044\054\043\061\051\063\056\072\046\073\101" +
    "\132\074\133\102\134\040\135\064\001\002\000\126\002" +
    "\uff4e\004\uff4e\005\uff4e\007\uff4e\010\uff4e\012\uff4e\013\uff4e" +
    "\014\uff4e\015\uff4e\016\uff4e\017\uff4e\020\uff4e\021\uff4e\023" +
    "\uff4e\024\uff4e\025\uff4e\027\uff4e\031\uff4e\032\uff4e\036\uff4e" +
    "\042\uff4e\043\uff4e\057\uff4e\060\uff4e\062\uff4e\064\uff4e\065" +
    "\uff4e\066\uff4e\067\uff4e\070\uff4e\071\uff4e\113\uff4e\114\uff4e" +
    "\116\uff4e\117\uff4e\120\uff4e\125\uff4e\126\uff4e\133\uff4e\134" +
    "\uff4e\137\uff4e\140\uff4e\001\002\000\004\060\217\001\002" +
    "\000\044\010\045\026\042\033\057\034\075\035\062\040" +
    "\050\045\063\053\044\054\043\061\051\063\056\072\046" +
    "\073\101\132\074\133\102\134\040\135\064\001\002\000" +
    "\010\025\uff4c\027\uff4c\036\uff4c\001\002\000\004\025\222" +
    "\001\002\000\126\002\uff4f\004\uff4f\005\uff4f\007\uff4f\010" +
    "\uff4f\012\uff4f\013\uff4f\014\uff4f\015\uff4f\016\uff4f\017\uff4f" +
    "\020\uff4f\021\uff4f\023\uff4f\024\uff4f\025\uff4f\027\uff4f\031" +
    "\uff4f\032\uff4f\036\uff4f\042\uff4f\043\uff4f\057\uff4f\060\uff4f" +
    "\062\uff4f\064\uff4f\065\uff4f\066\uff4f\067\uff4f\070\uff4f\071" +
    "\uff4f\113\uff4f\114\uff4f\116\uff4f\117\uff4f\120\uff4f\125\uff4f" +
    "\126\uff4f\133\uff4f\134\uff4f\137\uff4f\140\uff4f\001\002\000" +
    "\044\010\045\026\042\033\057\034\075\035\062\040\050" +
    "\045\063\053\044\054\043\061\051\063\056\072\046\073" +
    "\101\132\074\133\102\134\040\135\064\001\002\000\066" +
    "\010\045\015\231\026\042\033\057\034\075\035\062\037" +
    "\234\040\050\041\226\045\063\047\237\050\236\051\244" +
    "\052\240\053\044\054\043\055\230\061\232\063\056\072" +
    "\046\073\101\124\242\132\074\133\102\134\040\135\064" +
    "\001\002\000\126\002\uff4a\004\uff4a\005\uff4a\007\uff4a\010" +
    "\uff4a\012\uff4a\013\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a" +
    "\020\uff4a\021\uff4a\023\uff4a\024\uff4a\025\uff4a\027\uff4a\031" +
    "\uff4a\032\uff4a\036\uff4a\042\uff4a\043\uff4a\057\uff4a\060\uff4a" +
    "\062\uff4a\064\uff4a\065\uff4a\066\uff4a\067\uff4a\070\uff4a\071" +
    "\uff4a\113\uff4a\114\uff4a\116\uff4a\117\uff4a\120\uff4a\125\uff4a" +
    "\126\uff4a\133\uff4a\134\uff4a\137\uff4a\140\uff4a\001\002\000" +
    "\004\061\u0122\001\002\000\006\013\u0103\060\u0120\001\002" +
    "\000\004\061\u011b\001\002\000\064\010\045\026\042\033" +
    "\057\034\075\035\062\037\234\040\050\041\226\045\063" +
    "\047\237\050\236\051\244\052\240\053\044\054\043\055" +
    "\230\061\u0116\063\056\072\046\073\101\124\242\132\074" +
    "\133\102\134\040\135\064\001\002\000\066\010\045\015" +
    "\231\026\042\033\057\034\075\035\062\037\234\040\050" +
    "\041\226\045\063\047\237\050\236\051\244\052\240\053" +
    "\044\054\043\055\230\061\232\063\056\072\046\073\101" +
    "\124\242\132\074\133\102\134\040\135\064\001\002\000" +
    "\042\002\uff98\012\uff98\013\uff98\014\uff98\043\uff98\057\uff98" +
    "\060\uff98\062\uff98\114\uff98\116\uff98\117\uff98\120\uff98\125" +
    "\uff98\126\uff98\137\uff98\140\uff98\001\002\000\004\061\374" +
    "\001\002\000\040\002\uff9d\012\uff9d\013\uff9d\043\uff9d\057" +
    "\uff9d\060\uff9d\062\uff9d\114\uff9d\116\uff9d\117\uff9d\120\uff9d" +
    "\125\uff9d\126\uff9d\137\uff9d\140\uff9d\001\002\000\004\061" +
    "\367\001\002\000\004\061\362\001\002\000\004\061\355" +
    "\001\002\000\030\015\276\020\300\021\272\023\267\024" +
    "\301\064\271\065\274\066\273\067\270\070\275\071\266" +
    "\001\002\000\004\061\256\001\002\000\042\002\uff9c\012" +
    "\uff9c\013\uff9c\014\252\043\uff9c\057\uff9c\060\uff9c\062\uff9c" +
    "\114\uff9c\116\uff9c\117\uff9c\120\uff9c\125\uff9c\126\uff9c\137" +
    "\uff9c\140\uff9c\001\002\000\004\061\245\001\002\000\044" +
    "\010\045\026\042\033\057\034\075\035\062\040\050\045" +
    "\063\053\044\054\043\061\051\063\056\072\046\073\101" +
    "\132\074\133\102\134\040\135\064\001\002\000\004\005" +
    "\247\001\002\000\044\010\045\026\042\033\057\034\075" +
    "\035\062\040\050\045\063\053\044\054\043\061\051\063" +
    "\056\072\046\073\101\132\074\133\102\134\040\135\064" +
    "\001\002\000\004\062\251\001\002\000\042\002\uff82\012" +
    "\uff82\013\uff82\014\uff82\043\uff82\057\uff82\060\uff82\062\uff82" +
    "\114\uff82\116\uff82\117\uff82\120\uff82\125\uff82\126\uff82\137" +
    "\uff82\140\uff82\001\002\000\066\010\045\015\253\026\042" +
    "\033\057\034\075\035\062\037\234\040\050\041\226\045" +
    "\063\047\237\050\236\051\244\052\240\053\044\054\043" +
    "\055\230\061\232\063\056\072\046\073\101\124\242\132" +
    "\074\133\102\134\040\135\064\001\002\000\064\010\045" +
    "\026\042\033\057\034\075\035\062\037\234\040\050\041" +
    "\226\045\063\047\237\050\236\051\244\052\240\053\044" +
    "\054\043\055\230\061\232\063\056\072\046\073\101\124" +
    "\242\132\074\133\102\134\040\135\064\001\002\000\042" +
    "\002\uff95\012\uff95\013\uff95\014\uff95\043\uff95\057\uff95\060" +
    "\uff95\062\uff95\114\uff95\116\uff95\117\uff95\120\uff95\125\uff95" +
    "\126\uff95\137\uff95\140\uff95\001\002\000\042\002\uff94\012" +
    "\uff94\013\uff94\014\uff94\043\uff94\057\uff94\060\uff94\062\uff94" +
    "\114\uff94\116\uff94\117\uff94\120\uff94\125\uff94\126\uff94\137" +
    "\uff94\140\uff94\001\002\000\044\010\045\026\042\033\057" +
    "\034\075\035\062\040\050\045\063\053\044\054\043\061" +
    "\051\063\056\072\046\073\101\132\074\133\102\134\040" +
    "\135\064\001\002\000\004\005\260\001\002\000\044\010" +
    "\045\026\042\033\057\034\075\035\062\040\050\045\063" +
    "\053\044\054\043\061\051\063\056\072\046\073\101\132" +
    "\074\133\102\134\040\135\064\001\002\000\006\005\262" +
    "\062\263\001\002\000\004\132\264\001\002\000\042\002" +
    "\uff8d\012\uff8d\013\uff8d\014\uff8d\043\uff8d\057\uff8d\060\uff8d" +
    "\062\uff8d\114\uff8d\116\uff8d\117\uff8d\120\uff8d\125\uff8d\126" +
    "\uff8d\137\uff8d\140\uff8d\001\002\000\004\062\265\001\002" +
    "\000\042\002\uff8c\012\uff8c\013\uff8c\014\uff8c\043\uff8c\057" +
    "\uff8c\060\uff8c\062\uff8c\114\uff8c\116\uff8c\117\uff8c\120\uff8c" +
    "\125\uff8c\126\uff8c\137\uff8c\140\uff8c\001\002\000\044\010" +
    "\uff8e\026\uff8e\033\uff8e\034\uff8e\035\uff8e\040\uff8e\045\uff8e" +
    "\053\uff8e\054\uff8e\061\uff8e\063\uff8e\072\uff8e\073\uff8e\132" +
    "\uff8e\133\uff8e\134\uff8e\135\uff8e\001\002\000\004\061\350" +
    "\001\002\000\044\010\uff90\026\uff90\033\uff90\034\uff90\035" +
    "\uff90\040\uff90\045\uff90\053\uff90\054\uff90\061\uff90\063\uff90" +
    "\072\uff90\073\uff90\132\uff90\133\uff90\134\uff90\135\uff90\001" +
    "\002\000\044\010\uff93\026\uff93\033\uff93\034\uff93\035\uff93" +
    "\040\uff93\045\uff93\053\uff93\054\uff93\061\uff93\063\uff93\072" +
    "\uff93\073\uff93\132\uff93\133\uff93\134\uff93\135\uff93\001\002" +
    "\000\044\010\045\026\042\033\057\034\075\035\062\040" +
    "\050\045\063\053\044\054\043\061\051\063\056\072\046" +
    "\073\101\132\074\133\102\134\040\135\064\001\002\000" +
    "\044\010\uff91\026\uff91\033\uff91\034\uff91\035\uff91\040\uff91" +
    "\045\uff91\053\uff91\054\uff91\061\uff91\063\uff91\072\uff91\073" +
    "\uff91\132\uff91\133\uff91\134\uff91\135\uff91\001\002\000\044" +
    "\010\uff92\026\uff92\033\uff92\034\uff92\035\uff92\040\uff92\045" +
    "\uff92\053\uff92\054\uff92\061\uff92\063\uff92\072\uff92\073\uff92" +
    "\132\uff92\133\uff92\134\uff92\135\uff92\001\002\000\044\010" +
    "\uff8f\026\uff8f\033\uff8f\034\uff8f\035\uff8f\040\uff8f\045\uff8f" +
    "\053\uff8f\054\uff8f\061\uff8f\063\uff8f\072\uff8f\073\uff8f\132" +
    "\uff8f\133\uff8f\134\uff8f\135\uff8f\001\002\000\010\020\311" +
    "\021\313\023\312\001\002\000\044\010\045\026\042\033" +
    "\057\034\075\035\062\040\050\045\063\053\044\054\043" +
    "\061\051\063\056\072\046\073\101\132\074\133\102\134" +
    "\040\135\064\001\002\000\044\010\045\026\042\033\057" +
    "\034\075\035\062\040\050\045\063\053\044\054\043\061" +
    "\051\063\056\072\046\073\101\132\074\133\102\134\040" +
    "\135\064\001\002\000\006\015\302\035\303\001\002\000" +
    "\004\035\304\001\002\000\042\002\uff7e\012\uff7e\013\uff7e" +
    "\014\uff7e\043\uff7e\057\uff7e\060\uff7e\062\uff7e\114\uff7e\116" +
    "\uff7e\117\uff7e\120\uff7e\125\uff7e\126\uff7e\137\uff7e\140\uff7e" +
    "\001\002\000\042\002\uff7d\012\uff7d\013\uff7d\014\uff7d\043" +
    "\uff7d\057\uff7d\060\uff7d\062\uff7d\114\uff7d\116\uff7d\117\uff7d" +
    "\120\uff7d\125\uff7d\126\uff7d\137\uff7d\140\uff7d\001\002\000" +
    "\044\002\uff89\012\uff89\013\uff89\014\uff89\043\uff89\057\uff89" +
    "\060\uff89\062\uff89\113\306\114\uff89\116\uff89\117\uff89\120" +
    "\uff89\125\uff89\126\uff89\137\uff89\140\uff89\001\002\000\004" +
    "\132\307\001\002\000\042\002\uff8b\012\uff8b\013\uff8b\014" +
    "\uff8b\043\uff8b\057\uff8b\060\uff8b\062\uff8b\114\uff8b\116\uff8b" +
    "\117\uff8b\120\uff8b\125\uff8b\126\uff8b\137\uff8b\140\uff8b\001" +
    "\002\000\042\002\uff76\012\uff76\013\uff76\014\uff76\043\uff76" +
    "\057\uff76\060\uff76\062\uff76\114\uff76\116\uff76\117\uff76\120" +
    "\uff76\125\uff76\126\uff76\137\uff76\140\uff76\001\002\000\044" +
    "\010\045\026\042\033\057\034\075\035\062\040\050\045" +
    "\063\053\044\054\043\061\051\063\056\072\046\073\101" +
    "\132\074\133\102\134\040\135\064\001\002\000\004\061" +
    "\317\001\002\000\044\010\045\026\042\033\057\034\075" +
    "\035\062\040\050\045\063\053\044\054\043\061\051\063" +
    "\056\072\046\073\101\132\074\133\102\134\040\135\064" +
    "\001\002\000\004\014\315\001\002\000\044\010\045\026" +
    "\042\033\057\034\075\035\062\040\050\045\063\053\044" +
    "\054\043\061\051\063\056\072\046\073\101\132\074\133" +
    "\102\134\040\135\064\001\002\000\042\002\uff80\012\uff80" +
    "\013\uff80\014\uff80\043\uff80\057\uff80\060\uff80\062\uff80\114" +
    "\uff80\116\uff80\117\uff80\120\uff80\125\uff80\126\uff80\137\uff80" +
    "\140\uff80\001\002\000\046\006\004\010\045\026\042\033" +
    "\057\034\075\035\062\040\050\045\063\053\044\054\043" +
    "\061\321\063\056\072\046\073\101\132\074\133\102\134" +
    "\040\135\064\001\002\000\006\005\116\062\341\001\002" +
    "\000\046\006\004\010\045\026\042\033\057\034\075\035" +
    "\062\040\050\045\063\053\044\054\043\061\321\063\056" +
    "\072\046\073\101\132\074\133\102\134\040\135\064\001" +
    "\002\000\004\062\323\001\002\000\042\002\uff7b\012\uff7b" +
    "\013\uff7b\014\uff7b\043\uff7b\057\uff7b\060\uff7b\062\uff7b\114" +
    "\uff7b\116\uff7b\117\uff7b\120\uff7b\125\uff7b\126\uff7b\137\uff7b" +
    "\140\uff7b\001\002\000\012\114\333\116\327\117\331\120" +
    "\332\001\002\000\014\062\326\114\333\116\327\117\331" +
    "\120\332\001\002\000\024\002\uffbf\043\uffbf\062\uffbf\114" +
    "\uffbf\116\uffbf\117\uffbf\120\uffbf\125\uffbf\126\uffbf\001\002" +
    "\000\006\006\uffc6\061\uffc6\001\002\000\004\006\004\001" +
    "\002\000\006\006\uffc5\061\uffc5\001\002\000\006\006\uffc7" +
    "\061\uffc7\001\002\000\010\006\uffc8\061\uffc8\115\334\001" +
    "\002\000\006\006\uffc9\061\uffc9\001\002\000\024\002\uffc3" +
    "\043\uffc3\062\uffc3\114\uffc3\116\uffc3\117\uffc3\120\uffc3\125" +
    "\uffc3\126\uffc3\001\002\000\006\006\004\061\015\001\002" +
    "\000\024\002\uffc1\043\uffc1\062\uffc1\114\uffc1\116\uffc1\117" +
    "\uffc1\120\uffc1\125\uffc1\126\uffc1\001\002\000\024\002\uffc4" +
    "\043\uffc4\062\uffc4\114\uffc4\116\uffc4\117\uffc4\120\uffc4\125" +
    "\uffc4\126\uffc4\001\002\000\042\002\uff77\012\uff77\013\uff77" +
    "\014\uff77\043\uff77\057\uff77\060\uff77\062\uff77\114\uff77\116" +
    "\uff77\117\uff77\120\uff77\125\uff77\126\uff77\137\uff77\140\uff77" +
    "\001\002\000\044\002\uff88\012\uff88\013\uff88\014\uff88\043" +
    "\uff88\057\uff88\060\uff88\062\uff88\113\343\114\uff88\116\uff88" +
    "\117\uff88\120\uff88\125\uff88\126\uff88\137\uff88\140\uff88\001" +
    "\002\000\004\132\344\001\002\000\042\002\uff8a\012\uff8a" +
    "\013\uff8a\014\uff8a\043\uff8a\057\uff8a\060\uff8a\062\uff8a\114" +
    "\uff8a\116\uff8a\117\uff8a\120\uff8a\125\uff8a\126\uff8a\137\uff8a" +
    "\140\uff8a\001\002\000\004\014\346\001\002\000\044\010" +
    "\045\026\042\033\057\034\075\035\062\040\050\045\063" +
    "\053\044\054\043\061\051\063\056\072\046\073\101\132" +
    "\074\133\102\134\040\135\064\001\002\000\042\002\uff81" +
    "\012\uff81\013\uff81\014\uff81\043\uff81\057\uff81\060\uff81\062" +
    "\uff81\114\uff81\116\uff81\117\uff81\120\uff81\125\uff81\126\uff81" +
    "\137\uff81\140\uff81\001\002\000\046\006\004\010\045\026" +
    "\042\033\057\034\075\035\062\040\050\045\063\053\044" +
    "\054\043\061\321\063\056\072\046\073\101\132\074\133" +
    "\102\134\040\135\064\001\002\000\006\005\116\062\354" +
    "\001\002\000\004\062\353\001\002\000\042\002\uff7c\012" +
    "\uff7c\013\uff7c\014\uff7c\043\uff7c\057\uff7c\060\uff7c\062\uff7c" +
    "\114\uff7c\116\uff7c\117\uff7c\120\uff7c\125\uff7c\126\uff7c\137" +
    "\uff7c\140\uff7c\001\002\000\042\002\uff78\012\uff78\013\uff78" +
    "\014\uff78\043\uff78\057\uff78\060\uff78\062\uff78\114\uff78\116" +
    "\uff78\117\uff78\120\uff78\125\uff78\126\uff78\137\uff78\140\uff78" +
    "\001\002\000\044\010\045\026\042\033\057\034\075\035" +
    "\062\040\050\045\063\053\044\054\043\061\051\063\056" +
    "\072\046\073\101\132\074\133\102\134\040\135\064\001" +
    "\002\000\004\005\357\001\002\000\044\010\045\026\042" +
    "\033\057\034\075\035\062\040\050\045\063\053\044\054" +
    "\043\061\051\063\056\072\046\073\101\132\074\133\102" +
    "\134\040\135\064\001\002\000\004\062\361\001\002\000" +
    "\042\002\uff85\012\uff85\013\uff85\014\uff85\043\uff85\057\uff85" +
    "\060\uff85\062\uff85\114\uff85\116\uff85\117\uff85\120\uff85\125" +
    "\uff85\126\uff85\137\uff85\140\uff85\001\002\000\044\010\045" +
    "\026\042\033\057\034\075\035\062\040\050\045\063\053" +
    "\044\054\043\061\051\063\056\072\046\073\101\132\074" +
    "\133\102\134\040\135\064\001\002\000\004\005\364\001" +
    "\002\000\044\010\045\026\042\033\057\034\075\035\062" +
    "\040\050\045\063\053\044\054\043\061\051\063\056\072" +
    "\046\073\101\132\074\133\102\134\040\135\064\001\002" +
    "\000\004\062\366\001\002\000\042\002\uff83\012\uff83\013" +
    "\uff83\014\uff83\043\uff83\057\uff83\060\uff83\062\uff83\114\uff83" +
    "\116\uff83\117\uff83\120\uff83\125\uff83\126\uff83\137\uff83\140" +
    "\uff83\001\002\000\044\010\045\026\042\033\057\034\075" +
    "\035\062\040\050\045\063\053\044\054\043\061\051\063" +
    "\056\072\046\073\101\132\074\133\102\134\040\135\064" +
    "\001\002\000\004\005\371\001\002\000\044\010\045\026" +
    "\042\033\057\034\075\035\062\040\050\045\063\053\044" +
    "\054\043\061\051\063\056\072\046\073\101\132\074\133" +
    "\102\134\040\135\064\001\002\000\004\062\373\001\002" +
    "\000\042\002\uff86\012\uff86\013\uff86\014\uff86\043\uff86\057" +
    "\uff86\060\uff86\062\uff86\114\uff86\116\uff86\117\uff86\120\uff86" +
    "\125\uff86\126\uff86\137\uff86\140\uff86\001\002\000\006\006" +
    "\004\061\015\001\002\000\004\062\376\001\002\000\042" +
    "\002\uff7f\012\uff7f\013\uff7f\014\uff7f\043\uff7f\057\uff7f\060" +
    "\uff7f\062\uff7f\114\uff7f\116\uff7f\117\uff7f\120\uff7f\125\uff7f" +
    "\126\uff7f\137\uff7f\140\uff7f\001\002\000\006\005\116\062" +
    "\u010c\001\002\000\006\013\u0103\062\u0102\001\002\000\034" +
    "\005\uffa0\015\276\020\300\021\272\023\267\024\301\062" +
    "\174\064\271\065\274\066\273\067\270\070\275\071\266" +
    "\001\002\000\042\002\uff75\012\uff75\013\uff75\014\uff75\043" +
    "\uff75\057\uff75\060\uff75\062\uff75\114\uff75\116\uff75\117\uff75" +
    "\120\uff75\125\uff75\126\uff75\137\uff75\140\uff75\001\002\000" +
    "\066\010\045\015\u0104\026\042\033\057\034\075\035\062" +
    "\037\234\040\050\041\226\045\063\047\237\050\236\051" +
    "\244\052\240\053\044\054\043\055\230\061\232\063\056" +
    "\072\046\073\101\124\242\132\074\133\102\134\040\135" +
    "\064\001\002\000\064\010\045\026\042\033\057\034\075" +
    "\035\062\037\234\040\050\041\226\045\063\047\237\050" +
    "\236\051\244\052\240\053\044\054\043\055\230\061\u0106" +
    "\063\056\072\046\073\101\124\242\132\074\133\102\134" +
    "\040\135\064\001\002\000\042\002\uff9a\012\uff9a\013\uff9a" +
    "\014\252\043\uff9a\057\uff9a\060\uff9a\062\uff9a\114\uff9a\116" +
    "\uff9a\117\uff9a\120\uff9a\125\uff9a\126\uff9a\137\uff9a\140\uff9a" +
    "\001\002\000\066\010\045\015\231\026\042\033\057\034" +
    "\075\035\062\037\234\040\050\041\226\045\063\047\237" +
    "\050\236\051\244\052\240\053\044\054\043\055\230\061" +
    "\232\063\056\072\046\073\101\124\242\132\074\133\102" +
    "\134\040\135\064\001\002\000\042\002\uff97\012\uff97\013" +
    "\uff97\014\uff97\043\uff97\057\uff97\060\uff97\062\uff97\114\uff97" +
    "\116\uff97\117\uff97\120\uff97\125\uff97\126\uff97\137\uff97\140" +
    "\uff97\001\002\000\010\013\uff98\014\uff98\062\u010b\001\002" +
    "\000\010\013\uff9c\014\252\062\u010a\001\002\000\040\002" +
    "\uff99\012\uff99\013\uff99\043\uff99\057\uff99\060\uff99\062\uff99" +
    "\114\uff99\116\uff99\117\uff99\120\uff99\125\uff99\126\uff99\137" +
    "\uff99\140\uff99\001\002\000\042\002\uff96\012\uff96\013\uff96" +
    "\014\uff96\043\uff96\057\uff96\060\uff96\062\uff96\114\uff96\116" +
    "\uff96\117\uff96\120\uff96\125\uff96\126\uff96\137\uff96\140\uff96" +
    "\001\002\000\006\015\u010e\023\u010d\001\002\000\004\061" +
    "\u0113\001\002\000\004\023\u010f\001\002\000\004\061\u0110" +
    "\001\002\000\006\006\004\061\015\001\002\000\004\062" +
    "\u0112\001\002\000\042\002\uff79\012\uff79\013\uff79\014\uff79" +
    "\043\uff79\057\uff79\060\uff79\062\uff79\114\uff79\116\uff79\117" +
    "\uff79\120\uff79\125\uff79\126\uff79\137\uff79\140\uff79\001\002" +
    "\000\006\006\004\061\015\001\002\000\004\062\u0115\001" +
    "\002\000\042\002\uff7a\012\uff7a\013\uff7a\014\uff7a\043\uff7a" +
    "\057\uff7a\060\uff7a\062\uff7a\114\uff7a\116\uff7a\117\uff7a\120" +
    "\uff7a\125\uff7a\126\uff7a\137\uff7a\140\uff7a\001\002\000\066" +
    "\010\045\015\231\026\042\033\057\034\075\035\062\037" +
    "\234\040\050\041\226\045\063\047\237\050\236\051\244" +
    "\052\240\053\044\054\043\055\230\061\232\063\056\072" +
    "\046\073\101\124\242\132\074\133\102\134\040\135\064" +
    "\001\002\000\006\013\uff9d\062\u011a\001\002\000\010\013" +
    "\uff9c\014\252\062\u0119\001\002\000\040\002\uff9b\012\uff9b" +
    "\013\uff9b\043\uff9b\057\uff9b\060\uff9b\062\uff9b\114\uff9b\116" +
    "\uff9b\117\uff9b\120\uff9b\125\uff9b\126\uff9b\137\uff9b\140\uff9b" +
    "\001\002\000\040\002\uff9e\012\uff9e\013\uff9e\043\uff9e\057" +
    "\uff9e\060\uff9e\062\uff9e\114\uff9e\116\uff9e\117\uff9e\120\uff9e" +
    "\125\uff9e\126\uff9e\137\uff9e\140\uff9e\001\002\000\044\010" +
    "\045\026\042\033\057\034\075\035\062\040\050\045\063" +
    "\053\044\054\043\061\051\063\056\072\046\073\101\132" +
    "\074\133\102\134\040\135\064\001\002\000\004\005\u011d" +
    "\001\002\000\044\010\045\026\042\033\057\034\075\035" +
    "\062\040\050\045\063\053\044\054\043\061\051\063\056" +
    "\072\046\073\101\132\074\133\102\134\040\135\064\001" +
    "\002\000\004\062\u011f\001\002\000\042\002\uff84\012\uff84" +
    "\013\uff84\014\uff84\043\uff84\057\uff84\060\uff84\062\uff84\114" +
    "\uff84\116\uff84\117\uff84\120\uff84\125\uff84\126\uff84\137\uff84" +
    "\140\uff84\001\002\000\044\010\045\026\042\033\057\034" +
    "\075\035\062\040\050\045\063\053\044\054\043\061\051" +
    "\063\056\072\046\073\101\132\074\133\102\134\040\135" +
    "\064\001\002\000\010\025\uff48\027\uff48\036\uff48\001\002" +
    "\000\044\010\045\026\042\033\057\034\075\035\062\040" +
    "\050\045\063\053\044\054\043\061\051\063\056\072\046" +
    "\073\101\132\074\133\102\134\040\135\064\001\002\000" +
    "\004\005\u0124\001\002\000\044\010\045\026\042\033\057" +
    "\034\075\035\062\040\050\045\063\053\044\054\043\061" +
    "\051\063\056\072\046\073\101\132\074\133\102\134\040" +
    "\135\064\001\002\000\004\062\u0126\001\002\000\042\002" +
    "\uff87\012\uff87\013\uff87\014\uff87\043\uff87\057\uff87\060\uff87" +
    "\062\uff87\114\uff87\116\uff87\117\uff87\120\uff87\125\uff87\126" +
    "\uff87\137\uff87\140\uff87\001\002\000\004\025\u0128\001\002" +
    "\000\126\002\uff4b\004\uff4b\005\uff4b\007\uff4b\010\uff4b\012" +
    "\uff4b\013\uff4b\014\uff4b\015\uff4b\016\uff4b\017\uff4b\020\uff4b" +
    "\021\uff4b\023\uff4b\024\uff4b\025\uff4b\027\uff4b\031\uff4b\032" +
    "\uff4b\036\uff4b\042\uff4b\043\uff4b\057\uff4b\060\uff4b\062\uff4b" +
    "\064\uff4b\065\uff4b\066\uff4b\067\uff4b\070\uff4b\071\uff4b\113" +
    "\uff4b\114\uff4b\116\uff4b\117\uff4b\120\uff4b\125\uff4b\126\uff4b" +
    "\133\uff4b\134\uff4b\137\uff4b\140\uff4b\001\002\000\006\013" +
    "\u0103\060\u012a\001\002\000\044\010\045\026\042\033\057" +
    "\034\075\035\062\040\050\045\063\053\044\054\043\061" +
    "\051\063\056\072\046\073\101\132\074\133\102\134\040" +
    "\135\064\001\002\000\010\025\uff49\027\uff49\036\uff49\001" +
    "\002\000\126\002\uff62\004\uff62\005\uff62\007\uff62\010\uff62" +
    "\012\uff62\013\uff62\014\uff62\015\uff62\016\uff62\017\uff62\020" +
    "\uff62\021\uff62\023\uff62\024\uff62\025\uff62\027\uff62\031\uff62" +
    "\032\uff62\036\uff62\042\uff62\043\uff62\057\uff62\060\uff62\062" +
    "\uff62\064\uff62\065\uff62\066\uff62\067\uff62\070\uff62\071\uff62" +
    "\113\uff62\114\uff62\116\uff62\117\uff62\120\uff62\125\uff62\126" +
    "\uff62\133\uff62\134\uff62\137\uff62\140\uff62\001\002\000\006" +
    "\002\uffe3\126\uffe3\001\002\000\004\002\uffe4\001\002\000" +
    "\004\135\u0130\001\002\000\006\002\uffe2\130\u0131\001\002" +
    "\000\004\131\u0132\001\002\000\004\002\uffe1\001\002\000" +
    "\004\002\uffdd\001\002\000\006\005\u013a\007\u013b\001\002" +
    "\000\006\005\uffbe\007\uffbe\001\002\000\012\004\u0137\005" +
    "\uffba\007\uffba\133\u0138\001\002\000\004\133\u0139\001\002" +
    "\000\006\005\uffbb\007\uffbb\001\002\000\006\005\uffbc\007" +
    "\uffbc\001\002\000\044\010\045\026\042\033\057\034\075" +
    "\035\062\040\050\045\063\053\044\054\043\061\051\063" +
    "\056\072\046\073\101\132\074\133\102\134\040\135\064" +
    "\001\002\000\006\061\u0148\133\u0147\001\002\000\030\002" +
    "\uffd0\012\u013d\043\uffd0\057\u013e\062\uffd0\114\uffd0\116\uffd0" +
    "\117\uffd0\120\uffd0\125\uffd0\126\uffd0\001\002\000\066\010" +
    "\045\015\231\026\042\033\057\034\075\035\062\037\234" +
    "\040\050\041\226\045\063\047\237\050\236\051\244\052" +
    "\240\053\044\054\043\055\230\061\232\063\056\072\046" +
    "\073\101\124\242\132\074\133\102\134\040\135\064\001" +
    "\002\000\044\010\045\026\042\033\057\034\075\035\062" +
    "\040\050\045\063\053\044\054\043\061\051\063\056\072" +
    "\046\073\101\132\074\133\102\134\040\135\064\001\002" +
    "\000\026\002\uffd1\043\uffd1\057\u013e\062\uffd1\114\uffd1\116" +
    "\uffd1\117\uffd1\120\uffd1\125\uffd1\126\uffd1\001\002\000\024" +
    "\002\uffcf\043\uffcf\062\uffcf\114\uffcf\116\uffcf\117\uffcf\120" +
    "\uffcf\125\uffcf\126\uffcf\001\002\000\024\002\uffd2\043\uffd2" +
    "\062\uffd2\114\uffd2\116\uffd2\117\uffd2\120\uffd2\125\uffd2\126" +
    "\uffd2\001\002\000\030\002\uffa9\005\116\042\u0143\043\uffa9" +
    "\062\uffa9\114\uffa9\116\uffa9\117\uffa9\120\uffa9\125\uffa9\126" +
    "\uffa9\001\002\000\066\010\045\015\231\026\042\033\057" +
    "\034\075\035\062\037\234\040\050\041\226\045\063\047" +
    "\237\050\236\051\244\052\240\053\044\054\043\055\230" +
    "\061\232\063\056\072\046\073\101\124\242\132\074\133" +
    "\102\134\040\135\064\001\002\000\026\002\uffa8\013\u0103" +
    "\043\uffa8\062\uffa8\114\uffa8\116\uffa8\117\uffa8\120\uffa8\125" +
    "\uffa8\126\uffa8\001\002\000\030\002\uffaa\013\u0103\043\uffaa" +
    "\057\uffaa\062\uffaa\114\uffaa\116\uffaa\117\uffaa\120\uffaa\125" +
    "\uffaa\126\uffaa\001\002\000\030\002\uffb9\012\uffb9\043\uffb9" +
    "\057\uffb9\062\uffb9\114\uffb9\116\uffb9\117\uffb9\120\uffb9\125" +
    "\uffb9\126\uffb9\001\002\000\044\002\uffaf\004\u015d\005\uffaf" +
    "\012\uffaf\022\uffaf\043\uffaf\057\uffaf\062\uffaf\114\uffaf\116" +
    "\uffaf\117\uffaf\120\uffaf\125\uffaf\126\uffaf\133\u015e\137\uffaf" +
    "\140\uffaf\001\002\000\006\006\004\061\015\001\002\000" +
    "\036\002\uffb8\005\u014a\012\uffb8\043\uffb8\057\uffb8\062\uffb8" +
    "\114\uffb8\116\uffb8\117\uffb8\120\uffb8\125\uffb8\126\uffb8\137" +
    "\u014e\140\u014c\001\002\000\006\061\u0148\133\u0147\001\002" +
    "\000\034\002\uffb6\012\uffb6\043\uffb6\057\uffb6\062\uffb6\114" +
    "\uffb6\116\uffb6\117\uffb6\120\uffb6\125\uffb6\126\uffb6\137\u014e" +
    "\140\u014c\001\002\000\006\061\u0148\133\u0147\001\002\000" +
    "\034\002\uffb3\012\uffb3\043\uffb3\057\uffb3\062\uffb3\114\uffb3" +
    "\116\uffb3\117\uffb3\120\uffb3\125\uffb3\126\uffb3\137\uffb3\140" +
    "\uffb3\001\002\000\006\061\u0148\133\u0147\001\002\000\004" +
    "\022\u0150\001\002\000\066\010\045\015\231\026\042\033" +
    "\057\034\075\035\062\037\234\040\050\041\226\045\063" +
    "\047\237\050\236\051\244\052\240\053\044\054\043\055" +
    "\230\061\232\063\056\072\046\073\101\124\242\132\074" +
    "\133\102\134\040\135\064\001\002\000\036\002\uffb1\012" +
    "\uffb1\013\u0103\043\uffb1\057\uffb1\062\uffb1\114\uffb1\116\uffb1" +
    "\117\uffb1\120\uffb1\125\uffb1\126\uffb1\137\uffb1\140\uffb1\001" +
    "\002\000\034\002\uffb0\012\uffb0\043\uffb0\057\uffb0\062\uffb0" +
    "\114\uffb0\116\uffb0\117\uffb0\120\uffb0\125\uffb0\126\uffb0\137" +
    "\uffb0\140\uffb0\001\002\000\034\002\uffb2\012\uffb2\043\uffb2" +
    "\057\uffb2\062\uffb2\114\uffb2\116\uffb2\117\uffb2\120\uffb2\125" +
    "\uffb2\126\uffb2\137\uffb2\140\uffb2\001\002\000\032\002\uffb7" +
    "\005\u0156\012\uffb7\043\uffb7\057\uffb7\062\uffb7\114\uffb7\116" +
    "\uffb7\117\uffb7\120\uffb7\125\uffb7\126\uffb7\001\002\000\032" +
    "\002\uffb5\005\uffb5\012\uffb5\043\uffb5\057\uffb5\062\uffb5\114" +
    "\uffb5\116\uffb5\117\uffb5\120\uffb5\125\uffb5\126\uffb5\001\002" +
    "\000\006\061\u0148\133\u0147\001\002\000\032\002\uffb4\005" +
    "\uffb4\012\uffb4\043\uffb4\057\uffb4\062\uffb4\114\uffb4\116\uffb4" +
    "\117\uffb4\120\uffb4\125\uffb4\126\uffb4\001\002\000\004\062" +
    "\u0159\001\002\000\006\004\u015a\133\u015b\001\002\000\004" +
    "\133\u015c\001\002\000\040\002\uffab\005\uffab\012\uffab\022" +
    "\uffab\043\uffab\057\uffab\062\uffab\114\uffab\116\uffab\117\uffab" +
    "\120\uffab\125\uffab\126\uffab\137\uffab\140\uffab\001\002\000" +
    "\040\002\uffac\005\uffac\012\uffac\022\uffac\043\uffac\057\uffac" +
    "\062\uffac\114\uffac\116\uffac\117\uffac\120\uffac\125\uffac\126" +
    "\uffac\137\uffac\140\uffac\001\002\000\004\133\u015f\001\002" +
    "\000\040\002\uffad\005\uffad\012\uffad\022\uffad\043\uffad\057" +
    "\uffad\062\uffad\114\uffad\116\uffad\117\uffad\120\uffad\125\uffad" +
    "\126\uffad\137\uffad\140\uffad\001\002\000\040\002\uffae\005" +
    "\uffae\012\uffae\022\uffae\043\uffae\057\uffae\062\uffae\114\uffae" +
    "\116\uffae\117\uffae\120\uffae\125\uffae\126\uffae\137\uffae\140" +
    "\uffae\001\002\000\006\005\uffbd\007\uffbd\001\002\000\004" +
    "\111\u0163\001\002\000\006\002\ufff1\012\u013d\001\002\000" +
    "\006\072\u0165\133\u0166\001\002\000\010\002\uffef\005\u016d" +
    "\012\uffef\001\002\000\004\133\u016a\001\002\000\004\064" +
    "\u0168\001\002\000\010\002\uffee\005\uffee\012\uffee\001\002" +
    "\000\044\010\045\026\042\033\057\034\075\035\062\040" +
    "\050\045\063\053\044\054\043\061\051\063\056\072\046" +
    "\073\101\132\074\133\102\134\040\135\064\001\002\000" +
    "\010\002\uffec\005\uffec\012\uffec\001\002\000\004\064\u016b" +
    "\001\002\000\044\010\045\026\042\033\057\034\075\035" +
    "\062\040\050\045\063\053\044\054\043\061\051\063\056" +
    "\072\046\073\101\132\074\133\102\134\040\135\064\001" +
    "\002\000\010\002\uffeb\005\uffeb\012\uffeb\001\002\000\006" +
    "\072\u0165\133\u0166\001\002\000\010\002\uffed\005\uffed\012" +
    "\uffed\001\002\000\004\002\ufff0\001\002\000\006\006\004" +
    "\061\015\001\002\000\024\002\uffc0\043\uffc0\062\uffc0\114" +
    "\uffc0\116\uffc0\117\uffc0\120\uffc0\125\uffc0\126\uffc0\001\002" +
    "\000\024\002\uffc2\043\uffc2\062\uffc2\114\uffc2\116\uffc2\117" +
    "\uffc2\120\uffc2\125\uffc2\126\uffc2\001\002\000\004\133\u0174" +
    "\001\002\000\006\002\uffe8\012\u013d\001\002\000\004\002" +
    "\uffe7\001\002\000\004\133\u0177\001\002\000\004\061\u0178" +
    "\001\002\000\006\072\u0179\133\u017b\001\002\000\004\133" +
    "\u0188\001\002\000\006\005\u017c\062\u017d\001\002\000\006" +
    "\005\ufff9\062\ufff9\001\002\000\006\072\u0185\133\u0186\001" +
    "\002\000\006\061\u017f\106\u017e\001\002\000\004\061\u0182" +
    "\001\002\000\010\006\004\056\012\061\015\001\002\000" +
    "\004\062\u0181\001\002\000\004\002\uffe9\001\002\000\044" +
    "\010\045\026\042\033\057\034\075\035\062\040\050\045" +
    "\063\053\044\054\043\061\051\063\056\072\046\073\101" +
    "\132\074\133\102\134\040\135\064\001\002\000\006\005" +
    "\116\062\u0184\001\002\000\004\002\uffea\001\002\000\004" +
    "\133\u0187\001\002\000\006\005\ufff7\062\ufff7\001\002\000" +
    "\006\005\ufff6\062\ufff6\001\002\000\006\005\ufff8\062\ufff8" +
    "\001\002\000\010\005\u01a0\006\uffa7\061\uffa7\001\002\000" +
    "\010\005\uffa6\006\uffa6\061\uffa6\001\002\000\004\061\u0199" +
    "\001\002\000\012\005\uffa4\006\uffa4\061\uffa4\121\u018e\001" +
    "\002\000\010\005\uffa3\006\uffa3\061\uffa3\001\002\000\004" +
    "\133\u0190\001\002\000\006\005\u0191\111\u0192\001\002\000" +
    "\010\005\ufffb\062\ufffb\111\ufffb\001\002\000\004\133\u0198" +
    "\001\002\000\004\133\u0193\001\002\000\004\122\u0194\001" +
    "\002\000\004\132\u0195\001\002\000\004\123\u0196\001\002" +
    "\000\004\132\u0197\001\002\000\010\005\uffa1\006\uffa1\061" +
    "\uffa1\001\002\000\010\005\ufffa\062\ufffa\111\ufffa\001\002" +
    "\000\004\133\u0190\001\002\000\006\005\u0191\062\u019b\001" +
    "\002\000\004\004\u019c\001\002\000\004\061\u019d\001\002" +
    "\000\006\006\004\061\015\001\002\000\004\062\u019f\001" +
    "\002\000\012\005\uffa2\006\uffa2\061\uffa2\121\uffa2\001\002" +
    "\000\004\133\u018b\001\002\000\010\005\uffa5\006\uffa5\061" +
    "\uffa5\001\002\000\004\002\000\001\002\000\014\002\uffd5" +
    "\043\uffd5\062\uffd5\125\uffd5\126\uffd5\001\002\000\006\011" +
    "\ufff5\061\ufff5\001\002\000\006\011\u01a7\061\u01a6\001\002" +
    "\000\046\010\045\026\042\033\057\034\075\035\062\040" +
    "\050\045\063\053\044\054\043\061\051\062\u01aa\063\056" +
    "\072\046\073\101\132\074\133\102\134\040\135\064\001" +
    "\002\000\004\133\u01a8\001\002\000\006\011\ufff4\061\ufff4" +
    "\001\002\000\006\005\116\062\u01ab\001\002\000\004\002" +
    "\ufff3\001\002\000\004\002\ufff2\001\002\000\046\010\uffcb" +
    "\026\uffcb\033\uffcb\034\uffcb\035\uffcb\040\uffcb\045\uffcb\053" +
    "\uffcb\054\uffcb\061\uffcb\063\uffcb\072\uffcb\073\uffcb\132\uffcb" +
    "\133\uffcb\134\uffcb\135\uffcb\136\u01ad\001\002\000\046\010" +
    "\uff36\026\uff36\033\uff36\034\uff36\035\uff36\040\uff36\044\uff36" +
    "\045\uff36\053\uff36\054\uff36\061\uff36\063\uff36\072\uff36\073" +
    "\uff36\132\uff36\133\uff36\134\uff36\135\uff36\001\002\000\046" +
    "\010\uffce\026\uffce\033\uffce\034\uffce\035\uffce\040\uffce\044" +
    "\u01af\045\uffce\053\uffce\054\uffce\061\uffce\063\uffce\072\uffce" +
    "\073\uffce\132\uffce\133\uffce\134\uffce\135\uffce\001\002\000" +
    "\044\010\uffcc\026\uffcc\033\uffcc\034\uffcc\035\uffcc\040\uffcc" +
    "\045\uffcc\053\uffcc\054\uffcc\061\uffcc\063\uffcc\072\uffcc\073" +
    "\uffcc\132\uffcc\133\uffcc\134\uffcc\135\uffcc\001\002\000\044" +
    "\010\uffcd\026\uffcd\033\uffcd\034\uffcd\035\uffcd\040\uffcd\045" +
    "\uffcd\053\uffcd\054\uffcd\061\uffcd\063\uffcd\072\uffcd\073\uffcd" +
    "\132\uffcd\133\uffcd\134\uffcd\135\uffcd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    lr_parser.unpackFromStrings(new String[] {
    "\000\u01ae\000\034\002\007\003\025\004\020\005\016\011" +
    "\012\012\017\016\026\017\004\020\015\021\024\022\010" +
    "\023\022\034\006\001\001\000\004\077\u01ad\001\001\000" +
    "\002\001\001\000\004\105\u01a4\001\001\000\014\017\u01a2" +
    "\020\015\021\024\022\010\023\022\001\001\000\002\001" +
    "\001\000\004\102\327\001\001\000\010\035\u0188\036\u0189" +
    "\037\u018b\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\020\323\021\024\022\324\023\022\001\001\000\004" +
    "\102\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\u016f\001\001" +
    "\000\002\001\001\000\050\024\u0133\025\u0134\050\u0135\051" +
    "\072\052\040\053\060\054\077\055\054\056\071\060\065" +
    "\062\064\063\075\064\046\066\076\067\067\070\066\071" +
    "\052\072\051\073\057\001\001\000\002\001\001\000\012" +
    "\013\027\074\033\075\031\076\032\001\001\000\010\074" +
    "\033\075\031\076\u0132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\075\u012d\001\001\000" +
    "\002\001\001\000\050\014\053\015\036\050\070\051\072" +
    "\052\040\053\060\054\077\055\054\056\071\060\065\062" +
    "\064\063\075\064\046\066\076\067\067\070\066\071\052" +
    "\072\051\073\057\001\001\000\002\001\001\000\036\053" +
    "\u012b\054\077\055\054\056\071\060\065\062\064\063\075" +
    "\064\046\066\076\067\067\070\066\071\052\072\051\073" +
    "\057\001\001\000\002\001\001\000\046\050\204\051\072" +
    "\052\040\053\060\054\077\055\054\056\071\060\065\061" +
    "\203\062\064\063\075\064\046\066\076\067\067\070\066" +
    "\071\052\072\051\073\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\050\172\051\072\052" +
    "\040\053\060\054\077\055\054\056\071\060\065\062\064" +
    "\063\075\064\046\066\076\067\067\070\066\071\052\072" +
    "\051\073\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\047\110\050\113\051\072\052\040\053\060" +
    "\054\077\055\054\056\071\060\065\062\064\063\075\064" +
    "\046\066\076\067\067\070\066\071\052\072\051\073\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\047\114\050\113\051\072\052" +
    "\040\053\060\054\077\055\054\056\071\060\065\062\064" +
    "\063\075\064\046\066\076\067\067\070\066\071\052\072" +
    "\051\073\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\050\117\051\072\052\040\053\060\054\077\055" +
    "\054\056\071\060\065\062\064\063\075\064\046\066\076" +
    "\067\067\070\066\071\052\072\051\073\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\100\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\050\134\051\072\052\040\053\060\054\077" +
    "\055\054\056\071\060\065\062\064\063\075\064\046\066" +
    "\076\067\067\070\066\071\052\072\051\073\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\050\137\051" +
    "\072\052\040\053\060\054\077\055\054\056\071\060\065" +
    "\062\064\063\075\064\046\066\076\067\067\070\066\071" +
    "\052\072\051\073\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\145\001\001\000" +
    "\002\001\001\000\046\047\151\050\113\051\072\052\040" +
    "\053\060\054\077\055\054\056\071\060\065\062\064\063" +
    "\075\064\046\066\076\067\067\070\066\071\052\072\051" +
    "\073\057\001\001\000\004\013\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\052\161\053\060\054\077\055\054\056\071\060" +
    "\065\062\064\063\075\064\046\066\076\067\067\070\066" +
    "\071\052\072\051\073\057\001\001\000\040\052\154\053" +
    "\060\054\077\055\054\056\071\060\065\062\064\063\075" +
    "\064\046\066\076\067\067\070\066\071\052\072\051\073" +
    "\057\001\001\000\002\001\001\000\036\053\160\054\077" +
    "\055\054\056\071\060\065\062\064\063\075\064\046\066" +
    "\076\067\067\070\066\071\052\072\051\073\057\001\001" +
    "\000\036\053\157\054\077\055\054\056\071\060\065\062" +
    "\064\063\075\064\046\066\076\067\067\070\066\071\052" +
    "\072\051\073\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\015\171\050\070\051\072\052\040" +
    "\053\060\054\077\055\054\056\071\060\065\062\064\063" +
    "\075\064\046\066\076\067\067\070\066\071\052\072\051" +
    "\073\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\175\020\015\021\024\022\010" +
    "\023\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\043\u0128\044\234\045\242\046\232\050\240\051\072\052" +
    "\040\053\060\054\077\055\054\056\071\060\065\062\064" +
    "\063\075\064\046\066\076\067\067\070\066\071\052\072" +
    "\051\073\057\001\001\000\002\001\001\000\004\057\205" +
    "\001\001\000\002\001\001\000\044\050\207\051\072\052" +
    "\040\053\060\054\077\055\054\056\071\060\065\062\064" +
    "\063\075\064\046\066\076\067\067\070\066\071\052\072" +
    "\051\073\057\001\001\000\002\001\001\000\044\050\211" +
    "\051\072\052\040\053\060\054\077\055\054\056\071\060" +
    "\065\062\064\063\075\064\046\066\076\067\067\070\066" +
    "\071\052\072\051\073\057\001\001\000\002\001\001\000" +
    "\044\050\220\051\072\052\040\053\060\054\077\055\054" +
    "\056\071\060\065\062\064\063\075\064\046\066\076\067" +
    "\067\070\066\071\052\072\051\073\057\001\001\000\044" +
    "\050\215\051\072\052\040\053\060\054\077\055\054\056" +
    "\071\060\065\062\064\063\075\064\046\066\076\067\067" +
    "\070\066\071\052\072\051\073\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\050\217\051\072\052\040" +
    "\053\060\054\077\055\054\056\071\060\065\062\064\063" +
    "\075\064\046\066\076\067\067\070\066\071\052\072\051" +
    "\073\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\050\u0126\051\072\052\040\053\060" +
    "\054\077\055\054\056\071\060\065\062\064\063\075\064" +
    "\046\066\076\067\067\070\066\071\052\072\051\073\057" +
    "\001\001\000\054\043\226\044\234\045\242\046\232\050" +
    "\240\051\072\052\040\053\060\054\077\055\054\056\071" +
    "\060\065\062\064\063\075\064\046\066\076\067\067\070" +
    "\066\071\052\072\051\073\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\046\u0106\050\240\051\072\052\040\053\060\054\077" +
    "\055\054\056\071\060\065\062\064\063\075\064\046\066" +
    "\076\067\067\070\066\071\052\072\051\073\057\001\001" +
    "\000\056\043\377\044\234\045\242\046\232\047\376\050" +
    "\u0100\051\072\052\040\053\060\054\077\055\054\056\071" +
    "\060\065\062\064\063\075\064\046\066\076\067\067\070" +
    "\066\071\052\072\051\073\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\101\276\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\050\245\051\072\052\040\053\060\054\077\055\054" +
    "\056\071\060\065\062\064\063\075\064\046\066\076\067" +
    "\067\070\066\071\052\072\051\073\057\001\001\000\002" +
    "\001\001\000\044\050\247\051\072\052\040\053\060\054" +
    "\077\055\054\056\071\060\065\062\064\063\075\064\046" +
    "\066\076\067\067\070\066\071\052\072\051\073\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\046\253" +
    "\050\240\051\072\052\040\053\060\054\077\055\054\056" +
    "\071\060\065\062\064\063\075\064\046\066\076\067\067" +
    "\070\066\071\052\072\051\073\057\001\001\000\046\046" +
    "\254\050\240\051\072\052\040\053\060\054\077\055\054" +
    "\056\071\060\065\062\064\063\075\064\046\066\076\067" +
    "\067\070\066\071\052\072\051\073\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\050\256\051\072\052" +
    "\040\053\060\054\077\055\054\056\071\060\065\062\064" +
    "\063\075\064\046\066\076\067\067\070\066\071\052\072" +
    "\051\073\057\001\001\000\002\001\001\000\044\050\260" +
    "\051\072\052\040\053\060\054\077\055\054\056\071\060" +
    "\065\062\064\063\075\064\046\066\076\067\067\070\066" +
    "\071\052\072\051\073\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\050\344\051\072\052\040" +
    "\053\060\054\077\055\054\056\071\060\065\062\064\063" +
    "\075\064\046\066\076\067\067\070\066\071\052\072\051" +
    "\073\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\050\307\051\072" +
    "\052\040\053\060\054\077\055\054\056\071\060\065\062" +
    "\064\063\075\064\046\066\076\067\067\070\066\071\052" +
    "\072\051\073\057\001\001\000\044\050\304\051\072\052" +
    "\040\053\060\054\077\055\054\056\071\060\065\062\064" +
    "\063\075\064\046\066\076\067\067\070\066\071\052\072" +
    "\051\073\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\050\341\051\072\052\040\053\060\054\077\055\054\056" +
    "\071\060\065\062\064\063\075\064\046\066\076\067\067" +
    "\070\066\071\052\072\051\073\057\001\001\000\002\001" +
    "\001\000\044\050\313\051\072\052\040\053\060\054\077" +
    "\055\054\056\071\060\065\062\064\063\075\064\046\066" +
    "\076\067\067\070\066\071\052\072\051\073\057\001\001" +
    "\000\002\001\001\000\044\050\315\051\072\052\040\053" +
    "\060\054\077\055\054\056\071\060\065\062\064\063\075" +
    "\064\046\066\076\067\067\070\066\071\052\072\051\073" +
    "\057\001\001\000\002\001\001\000\060\017\321\020\015" +
    "\021\024\022\010\023\022\047\317\050\113\051\072\052" +
    "\040\053\060\054\077\055\054\056\071\060\065\062\064" +
    "\063\075\064\046\066\076\067\067\070\066\071\052\072" +
    "\051\073\057\001\001\000\002\001\001\000\054\020\323" +
    "\021\024\022\324\023\022\050\172\051\072\052\040\053" +
    "\060\054\077\055\054\056\071\060\065\062\064\063\075" +
    "\064\046\066\076\067\067\070\066\071\052\072\051\073" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\335\001\001\000\004\102\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\334\021\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\337\021\024" +
    "\023\336\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\050\346\051\072\052" +
    "\040\053\060\054\077\055\054\056\071\060\065\062\064" +
    "\063\075\064\046\066\076\067\067\070\066\071\052\072" +
    "\051\073\057\001\001\000\002\001\001\000\060\017\351" +
    "\020\015\021\024\022\010\023\022\047\350\050\113\051" +
    "\072\052\040\053\060\054\077\055\054\056\071\060\065" +
    "\062\064\063\075\064\046\066\076\067\067\070\066\071" +
    "\052\072\051\073\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\050" +
    "\355\051\072\052\040\053\060\054\077\055\054\056\071" +
    "\060\065\062\064\063\075\064\046\066\076\067\067\070" +
    "\066\071\052\072\051\073\057\001\001\000\002\001\001" +
    "\000\044\050\357\051\072\052\040\053\060\054\077\055" +
    "\054\056\071\060\065\062\064\063\075\064\046\066\076" +
    "\067\067\070\066\071\052\072\051\073\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\050\362\051\072" +
    "\052\040\053\060\054\077\055\054\056\071\060\065\062" +
    "\064\063\075\064\046\066\076\067\067\070\066\071\052" +
    "\072\051\073\057\001\001\000\002\001\001\000\044\050" +
    "\364\051\072\052\040\053\060\054\077\055\054\056\071" +
    "\060\065\062\064\063\075\064\046\066\076\067\067\070" +
    "\066\071\052\072\051\073\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\050\367\051\072\052\040\053" +
    "\060\054\077\055\054\056\071\060\065\062\064\063\075" +
    "\064\046\066\076\067\067\070\066\071\052\072\051\073" +
    "\057\001\001\000\002\001\001\000\044\050\371\051\072" +
    "\052\040\053\060\054\077\055\054\056\071\060\065\062" +
    "\064\063\075\064\046\066\076\067\067\070\066\071\052" +
    "\072\051\073\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\374\020\015\021\024\022\010\023\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\101\276\001\001\000\002" +
    "\001\001\000\050\045\u0104\046\232\050\240\051\072\052" +
    "\040\053\060\054\077\055\054\056\071\060\065\062\064" +
    "\063\075\064\046\066\076\067\067\070\066\071\052\072" +
    "\051\073\057\001\001\000\046\046\u0106\050\240\051\072" +
    "\052\040\053\060\054\077\055\054\056\071\060\065\062" +
    "\064\063\075\064\046\066\076\067\067\070\066\071\052" +
    "\072\051\073\057\001\001\000\002\001\001\000\056\043" +
    "\377\044\234\045\u0108\046\u0107\047\376\050\u0100\051\072" +
    "\052\040\053\060\054\077\055\054\056\071\060\065\062" +
    "\064\063\075\064\046\066\076\067\067\070\066\071\052" +
    "\072\051\073\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\u0110\020\015\021\024\022\010" +
    "\023\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\u0113\020\015\021\024\022\010\023\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\043\377\044" +
    "\u0116\045\u0117\046\u0107\047\376\050\u0100\051\072\052\040" +
    "\053\060\054\077\055\054\056\071\060\065\062\064\063" +
    "\075\064\046\066\076\067\067\070\066\071\052\072\051" +
    "\073\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\050\u011b\051\072" +
    "\052\040\053\060\054\077\055\054\056\071\060\065\062" +
    "\064\063\075\064\046\066\076\067\067\070\066\071\052" +
    "\072\051\073\057\001\001\000\002\001\001\000\044\050" +
    "\u011d\051\072\052\040\053\060\054\077\055\054\056\071" +
    "\060\065\062\064\063\075\064\046\066\076\067\067\070" +
    "\066\071\052\072\051\073\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\050\u0120\051\072\052\040\053" +
    "\060\054\077\055\054\056\071\060\065\062\064\063\075" +
    "\064\046\066\076\067\067\070\066\071\052\072\051\073" +
    "\057\001\001\000\002\001\001\000\044\050\u0122\051\072" +
    "\052\040\053\060\054\077\055\054\056\071\060\065\062" +
    "\064\063\075\064\046\066\076\067\067\070\066\071\052" +
    "\072\051\073\057\001\001\000\002\001\001\000\044\050" +
    "\u0124\051\072\052\040\053\060\054\077\055\054\056\071" +
    "\060\065\062\064\063\075\064\046\066\076\067\067\070" +
    "\066\071\052\072\051\073\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\050\u012a\051\072\052\040\053\060" +
    "\054\077\055\054\056\071\060\065\062\064\063\075\064" +
    "\046\066\076\067\067\070\066\071\052\072\051\073\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u013b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\025\u015f\050\u0135\051\072\052\040\053\060\054\077" +
    "\055\054\056\071\060\065\062\064\063\075\064\046\066" +
    "\076\067\067\070\066\071\052\072\051\073\057\001\001" +
    "\000\006\027\u0145\033\u0148\001\001\000\006\041\u013e\042" +
    "\u013f\001\001\000\054\043\u0144\044\234\045\242\046\232" +
    "\050\240\051\072\052\040\053\060\054\077\055\054\056" +
    "\071\060\065\062\064\063\075\064\046\066\076\067\067" +
    "\070\066\071\052\072\051\073\057\001\001\000\046\047" +
    "\u0141\050\113\051\072\052\040\053\060\054\077\055\054" +
    "\056\071\060\065\062\064\063\075\064\046\066\076\067" +
    "\067\070\066\071\052\072\051\073\057\001\001\000\004" +
    "\042\u0140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\043\u0143\044\234\045\242\046\232" +
    "\050\240\051\072\052\040\053\060\054\077\055\054\056" +
    "\071\060\065\062\064\063\075\064\046\066\076\067\067" +
    "\070\066\071\052\072\051\073\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\u0157\020\015\021\024\022\010\023\022\001" +
    "\001\000\006\031\u014a\032\u014c\001\001\000\006\030\u0153" +
    "\033\u0154\001\001\000\004\032\u0152\001\001\000\004\033" +
    "\u0151\001\001\000\002\001\001\000\004\033\u014e\001\001" +
    "\000\002\001\001\000\054\043\u0150\044\234\045\242\046" +
    "\232\050\240\051\072\052\040\053\060\054\077\055\054" +
    "\056\071\060\065\062\064\063\075\064\046\066\076\067" +
    "\067\070\066\071\052\072\051\073\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\u0156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u0161\001\001\000\004\041\u016e\001\001\000\006" +
    "\007\u0163\010\u0166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\050\u0168" +
    "\051\072\052\040\053\060\054\077\055\054\056\071\060" +
    "\065\062\064\063\075\064\046\066\076\067\067\070\066" +
    "\071\052\072\051\073\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\050\u016b\051\072\052\040\053\060" +
    "\054\077\055\054\056\071\060\065\062\064\063\075\064" +
    "\046\066\076\067\067\070\066\071\052\072\051\073\057" +
    "\001\001\000\002\001\001\000\004\010\u016d\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\u0171\021\024" +
    "\023\u0170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\u0174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\104\u0179\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\016\u017f\017\004\020\015\021\024\022\010\023\022" +
    "\034\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\047\u0182\050\113\051\072\052\040\053\060\054\077" +
    "\055\054\056\071\060\065\062\064\063\075\064\046\066" +
    "\076\067\067\070\066\071\052\072\051\073\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\u018c\001\001\000\002\001\001\000\004\103\u018e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\103\u0199\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\u019d\020\015\021" +
    "\024\022\010\023\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\u01a0\037\u018b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\047\u01a8\050\113\051\072\052" +
    "\040\053\060\054\077\055\054\056\071\060\065\062\064" +
    "\063\075\064\046\066\076\067\067\070\066\071\052\072" +
    "\051\073\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\077\u01af\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SqlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SqlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SqlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private StringBuilder buildErrorMessageByInfo(Object info) {
        StringBuilder m = new StringBuilder("Ошибка разбора sql");
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" строка "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", колонка "+(s.right+1));
            }
        }
        return m;
    }

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
        StringBuilder m = buildErrorMessageByInfo(info);
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info)
            throws SqlParserException{
        //report_error(message, info);
        //System.exit(1);
        throw new SqlParserException(buildErrorMessageByInfo(info).toString());
    }

    public void syntax_error(Symbol cur_token) {
      report_error("Синтаксическая ошибка", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token)
            throws SqlParserException {
      report_fatal_error("Дальнейший разбор невозможен", cur_token);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SqlParser$actions {
  private final SqlParser parser;

  /** Constructor */
  CUP$SqlParser$actions(SqlParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SqlParser$do_action_part00000000(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack            CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SqlParser$result;

      /* select the action based on the action number */
      switch (CUP$SqlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // request ::= cursor_specification 
            {
              Object RESULT =null;
		int cursorSpecleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cursorSpecright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object cursorSpec = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = cursorSpec; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("request",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= request EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		RESULT = start_val;
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SqlParser$parser.done_parsing();
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // request ::= delete_request 
            {
              Object RESULT =null;
		int requestleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int requestright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object request = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = request; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("request",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // request ::= insert_request 
            {
              Object RESULT =null;
		int requestleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int requestright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object request = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = request; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("request",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // request ::= update_request 
            {
              Object RESULT =null;
		int requestleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int requestright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object request = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = request; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("request",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // request ::= call_request 
            {
              Object RESULT =null;
		int requestleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int requestright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object request = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = request; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("request",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // identifiers_list ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildStringList(ident); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("identifiers_list",65, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // identifiers_list ::= identifiers_list COMMA IDENTIFIER 
            {
              List<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildStringList(list, ident); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("identifiers_list",65, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fields_list ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildFieldsList(ident, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("fields_list",66, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fields_list ::= BACK_QUOTE IDENTIFIER 
            {
              List<String> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildFieldsList(ident, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("fields_list",66, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fields_list ::= fields_list COMMA IDENTIFIER 
            {
              List<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildFieldsList(list, ident, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("fields_list",66, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fields_list ::= fields_list COMMA BACK_QUOTE IDENTIFIER 
            {
              List<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildFieldsList(list, ident, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("fields_list",66, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stored_proc_qualified_name ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildStringList(ident); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stored_proc_qualified_name",67, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stored_proc_qualified_name ::= stored_proc_qualified_name DOT IDENTIFIER 
            {
              List<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		List<String> list = (List<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildStringList(list, ident); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("stored_proc_qualified_name",67, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // call_request ::= CALL stored_proc_qualified_name PARENT_L PARENT_R 
            {
              Object RESULT =null;
		int qualifiedNameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int qualifiedNameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		List<String> qualifiedName = (List<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		 RESULT = SqlParseSupport.buildCallSP(qualifiedName, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("call_request",7, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // call_request ::= CALL stored_proc_qualified_name PARENT_L tuple PARENT_R 
            {
              Object RESULT =null;
		int qualifiedNameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int qualifiedNameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		List<String> qualifiedName = (List<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object tuple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildCallSP(qualifiedName, tuple); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("call_request",7, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // update_request ::= UPDATE IDENTIFIER clause_set 
            {
              Object RESULT =null;
		int identTableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int identTableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String identTable = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int clauseSetleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int clauseSetright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object clauseSet = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildUpdate(identTable, clauseSet, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("update_request",3, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // update_request ::= UPDATE IDENTIFIER clause_set clause_where 
            {
              Object RESULT =null;
		int identTableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int identTableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String identTable = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int clauseSetleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int clauseSetright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object clauseSet = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int clauseWhereleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int clauseWhereright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object clauseWhere = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildUpdate(identTable, clauseSet, clauseWhere); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("update_request",3, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // clause_set ::= SET assignments 
            {
              Object RESULT =null;
		int assignmentsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int assignmentsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object assignments = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = assignments; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("clause_set",4, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assignments ::= assignment 
            {
              Object RESULT =null;
		int assignmentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int assignmentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object assignment = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildAssignments(assignment); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("assignments",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assignments ::= assignments COMMA assignment 
            {
              Object RESULT =null;
		int assignmentsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int assignmentsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object assignments = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int assignmentleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int assignmentright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object assignment = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildAssignments(assignments, assignment); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("assignments",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assignment ::= IDENTIFIER EQUAL expr 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildAssignment(ident, expr, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assignment ::= BACK_QUOTE IDENTIFIER EQUAL expr 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildAssignment(ident, expr, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // insert_request ::= INSERT INTO IDENTIFIER PARENT_L fields_list PARENT_R VALUES PARENT_L tuple PARENT_R 
            {
              Object RESULT =null;
		int identTableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int identTableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		String identTable = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int columnsListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int columnsListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		List<String> columnsList = (List<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object tuple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildInsert(identTable, columnsList, tuple); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insert_request",1, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-9)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // insert_request ::= INSERT INTO IDENTIFIER PARENT_L fields_list PARENT_R PARENT_L select_statement PARENT_R 
            {
              Object RESULT =null;
		int identTableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int identTableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		String identTable = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int columnsListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int columnsListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		List<String> columnsList = (List<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int selectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object select = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildInsert(identTable, columnsList, select); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("insert_request",1, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-8)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // delete_request ::= DELETE FROM IDENTIFIER 
            {
              Object RESULT =null;
		int identTableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identTableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String identTable = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildDelete(identTable, null, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("delete_request",2, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // delete_request ::= DELETE FROM IDENTIFIER clause_where 
            {
              Object RESULT =null;
		int identTableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int identTableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String identTable = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int clauseWhereleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int clauseWhereright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object clauseWhere = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildDelete(identTable, clauseWhere, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("delete_request",2, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cursor_fetch_statement ::= cursor_fetch_offset 
            {
              SqlParseSupport.ParsedCursorFetchStatement RESULT =null;
		int fetchOffsetleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fetchOffsetright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Long fetchOffset = (Long)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                               RESULT = new SqlParseSupport.ParsedCursorFetchStatement().setOffset(fetchOffset);
                           
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cursor_fetch_statement",60, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cursor_fetch_statement ::= cursor_fetch_first 
            {
              SqlParseSupport.ParsedCursorFetchStatement RESULT =null;
		int fetchFirstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fetchFirstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Long fetchFirst = (Long)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                               RESULT = new SqlParseSupport.ParsedCursorFetchStatement().setFirst(fetchFirst);
                           
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cursor_fetch_statement",60, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cursor_fetch_statement ::= cursor_fetch_offset cursor_fetch_first 
            {
              SqlParseSupport.ParsedCursorFetchStatement RESULT =null;
		int fetchOffsetleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int fetchOffsetright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Long fetchOffset = (Long)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int fetchFirstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fetchFirstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Long fetchFirst = (Long)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                               RESULT = new SqlParseSupport.ParsedCursorFetchStatement()
                               .setOffset(fetchOffset)
                               .setFirst(fetchFirst);
                           
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cursor_fetch_statement",60, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cursor_fetch_offset ::= OFFSET NUMBER 
            {
              Long RESULT =null;
		int fetchOffsetleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fetchOffsetright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String fetchOffset = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                               RESULT = SqlParseSupport.buildFetchStatement(fetchOffset);
                           
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cursor_fetch_offset",58, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cursor_fetch_first ::= FETCH FIRST NUMBER 
            {
              Long RESULT =null;
		int fetchFirstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fetchFirstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String fetchFirst = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                              RESULT = SqlParseSupport.buildFetchStatement(fetchFirst);
                          
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cursor_fetch_first",59, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cursor_fetch_first ::= FETCH FIRST NUMBER ROWS ONLY 
            {
              Long RESULT =null;
		int fetchFirstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int fetchFirstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String fetchFirst = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		
                              RESULT = SqlParseSupport.buildFetchStatement(fetchFirst);
                          
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cursor_fetch_first",59, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cursor_specification ::= select_statement 
            {
              Object RESULT =null;
		int selectStatementleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int selectStatementright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object selectStatement = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                                RESULT = (Select) selectStatement;
                            
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cursor_specification",8, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cursor_specification ::= select_statement clause_order_by 
            {
              Object RESULT =null;
		int selectStatementleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int selectStatementright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object selectStatement = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int clauseOrderByleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int clauseOrderByright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object clauseOrderBy = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                                RESULT = SqlParseSupport.buildCursorSpecification(selectStatement, clauseOrderBy, null);
                            
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cursor_specification",8, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cursor_specification ::= select_statement cursor_fetch_statement 
            {
              Object RESULT =null;
		int selectStatementleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int selectStatementright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object selectStatement = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int fetchStatementleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fetchStatementright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SqlParseSupport.ParsedCursorFetchStatement fetchStatement = (SqlParseSupport.ParsedCursorFetchStatement)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                                RESULT = SqlParseSupport.buildCursorSpecification(selectStatement, null, fetchStatement);
                            
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cursor_specification",8, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cursor_specification ::= select_statement clause_order_by cursor_fetch_statement 
            {
              Object RESULT =null;
		int selectStatementleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int selectStatementright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object selectStatement = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int clauseOrderByleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int clauseOrderByright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object clauseOrderBy = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int fetchStatementleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fetchStatementright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		SqlParseSupport.ParsedCursorFetchStatement fetchStatement = (SqlParseSupport.ParsedCursorFetchStatement)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                                RESULT = SqlParseSupport.buildCursorSpecification(selectStatement, clauseOrderBy, fetchStatement);
                            
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cursor_specification",8, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // clause_order_by ::= ORDER_BY order_items 
            {
              Object RESULT =null;
		int orderItemsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int orderItemsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object orderItems = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = orderItems; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("clause_order_by",9, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // order_items ::= order_item 
            {
              Object RESULT =null;
		int orderItemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int orderItemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object orderItem = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildOrderBy(orderItem); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_items",10, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // order_items ::= order_items COMMA order_item 
            {
              Object RESULT =null;
		int orderItemsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int orderItemsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object orderItems = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int orderItemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int orderItemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object orderItem = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildOrderBy(orderItems, orderItem); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_items",10, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // order_item ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                      OrderByItem orderItem = new OrderByItem();
                      orderItem.setExpr((ColumnExpression) e);
                      RESULT = orderItem;
                  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_item",11, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // order_item ::= expr ASC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
                      OrderByItem orderItem = new OrderByItem();
                      orderItem.setExpr((ColumnExpression) e);
                      orderItem.direction = OrderByItem.OrderDirection.ASC;
                      RESULT = orderItem;
                  
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_item",11, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // order_item ::= expr DESC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
                      OrderByItem orderItem = new OrderByItem();
                      orderItem.setExpr((ColumnExpression) e);
                      orderItem.direction = OrderByItem.OrderDirection.DESC;
                      RESULT = orderItem;
                   
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("order_item",11, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // select_statement ::= select_body 
            {
              Object RESULT =null;
		int selectBodyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int selectBodyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object selectBody = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                            RESULT = (Select) selectBody;
                        
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_statement",12, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // select_statement ::= with_clause select_body 
            {
              Object RESULT =null;
		int withClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int withClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object withClause = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int selectBodyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int selectBodyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object selectBody = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		  RESULT = SqlParseSupport.buildSelectStatement(withClause, selectBody); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_statement",12, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // select_body ::= simple_select_statement 
            {
              Object RESULT =null;
		int selectSimpleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int selectSimpleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object selectSimple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                       RESULT = selectSimple;
                   
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_body",13, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // select_body ::= united_select_statement 
            {
              Object RESULT =null;
		int selectUnitedleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int selectUnitedright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object selectUnited = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                       RESULT = selectUnited;
                   
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_body",13, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_select_statement ::= select_head selected_columns from_clause clause_where clause_group_by 
            {
              Object RESULT =null;
		int selectHeadleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int selectHeadright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Object selectHead = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object columns = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int clauseFromleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int clauseFromright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object clauseFrom = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int clauseWhereleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int clauseWhereright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object clauseWhere = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int clauseGroupleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int clauseGroupright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object clauseGroup = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                                   RESULT = SqlParseSupport.buildSimpleSelectStatement(selectHead, columns, clauseFrom, clauseWhere, clauseGroup);
                               
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("simple_select_statement",14, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_select_statement ::= select_head selected_columns from_clause clause_where 
            {
              Object RESULT =null;
		int selectHeadleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int selectHeadright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object selectHead = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object columns = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int clauseFromleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int clauseFromright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object clauseFrom = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int clauseWhereleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int clauseWhereright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object clauseWhere = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                                   RESULT = SqlParseSupport.buildSimpleSelectStatement(selectHead, columns, clauseFrom, clauseWhere, null);
                               
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("simple_select_statement",14, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_select_statement ::= select_head selected_columns from_clause 
            {
              Object RESULT =null;
		int selectHeadleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int selectHeadright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object selectHead = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object columns = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int clauseFromleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int clauseFromright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object clauseFrom = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                                   RESULT = SqlParseSupport.buildSimpleSelectStatement(selectHead, columns, clauseFrom, null, null);
                               
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("simple_select_statement",14, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_select_statement ::= select_head selected_columns from_clause clause_group_by 
            {
              Object RESULT =null;
		int selectHeadleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int selectHeadright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object selectHead = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object columns = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int clauseFromleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int clauseFromright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object clauseFrom = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int clauseGroupleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int clauseGroupright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object clauseGroup = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                                   RESULT = SqlParseSupport.buildSimpleSelectStatement(selectHead, columns, clauseFrom, null, clauseGroup);
                               
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("simple_select_statement",14, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // select_head ::= SELECT comments 
            {
              Object RESULT =null;
		int commleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int commright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String comm = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		  RESULT = SqlParseSupport.buildSelectHead(comm, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_head",15, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // select_head ::= SELECT DISTINCT comments 
            {
              Object RESULT =null;
		int commleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int commright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String comm = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		  RESULT = SqlParseSupport.buildSelectHead(comm, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_head",15, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // select_head ::= SELECT comments DISTINCT 
            {
              Object RESULT =null;
		int commleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int commright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String comm = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		  RESULT = SqlParseSupport.buildSelectHead(comm, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_head",15, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // select_head ::= SELECT DISTINCT 
            {
              Object RESULT =null;
		  RESULT = SqlParseSupport.buildSelectHead(null, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_head",15, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // select_head ::= SELECT 
            {
              Object RESULT =null;
		  RESULT = SqlParseSupport.buildSelectHead(null, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("select_head",15, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // set_operator ::= UNION ALL 
            {
              String RESULT =null;
		 RESULT = "union all"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_operator",64, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // set_operator ::= UNION 
            {
              String RESULT =null;
		 RESULT = "union"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_operator",64, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // set_operator ::= INTERSECT 
            {
              String RESULT =null;
		 RESULT = "intersect"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_operator",64, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // set_operator ::= EXCEPT 
            {
              String RESULT =null;
		 RESULT = "except"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_operator",64, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // set_operator ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "minus"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("set_operator",64, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // united_select_statement ::= simple_select_statement set_operator simple_select_statement 
            {
              Object RESULT =null;
		int selectFirstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int selectFirstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object selectFirst = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int selectSecondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int selectSecondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object selectSecond = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buidlUnitedSelectStatement(selectFirst, op, selectSecond); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("united_select_statement",16, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // united_select_statement ::= united_select_statement set_operator simple_select_statement 
            {
              Object RESULT =null;
		int unitedSelectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int unitedSelectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object unitedSelect = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int selectLastleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int selectLastright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object selectLast = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buidlUnitedSelectStatement(unitedSelect, op, selectLast); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("united_select_statement",16, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // united_select_statement ::= united_select_statement_bracket set_operator simple_select_statement 
            {
              Object RESULT =null;
		int unitedSelectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int unitedSelectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object unitedSelect = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int selectLastleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int selectLastright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object selectLast = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buidlUnitedSelectStatement(unitedSelect, op, selectLast); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("united_select_statement",16, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // united_select_statement ::= simple_select_statement set_operator united_select_statement_bracket 
            {
              Object RESULT =null;
		int selectFirstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int selectFirstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object selectFirst = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int unitedSelectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int unitedSelectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object unitedSelect = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buidlUnitedSelectStatement(selectFirst, op, unitedSelect); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("united_select_statement",16, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // united_select_statement ::= united_select_statement_bracket set_operator united_select_statement_bracket 
            {
              Object RESULT =null;
		int unitedSelectFirstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int unitedSelectFirstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object unitedSelectFirst = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int unitedSelectSecondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int unitedSelectSecondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object unitedSelectSecond = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buidlUnitedSelectStatement(unitedSelectFirst, op, unitedSelectSecond); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("united_select_statement",16, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // united_select_statement_bracket ::= PARENT_L united_select_statement PARENT_R 
            {
              Object RESULT =null;
		int unitedSelectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int unitedSelectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object unitedSelect = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = unitedSelect; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("united_select_statement_bracket",17, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // selected_columns ::= column 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildColumns(c); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("selected_columns",18, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // selected_columns ::= selected_columns COMMA column 
            {
              Object RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object lst = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildColumns(lst, c); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("selected_columns",18, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // column ::= expr AS IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildColumn(e, i); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column",19, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // column ::= expr IDENTIFIER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildColumn(e, i); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column",19, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // column ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildColumn(e, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("column",19, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // from_clause ::= FROM from_items 
            {
              Object RESULT =null;
		int fromItemsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fromItemsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object fromItems = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = (FromContainer) fromItems; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("from_clause",20, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // from_items ::= table_expression 
            {
              Object RESULT =null;
		int fromItemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fromItemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object fromItem = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildFromItems(fromItem); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("from_items",21, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // from_items ::= table_expression COMMA cross_joined_tail 
            {
              Object RESULT =null;
		int firstFromItemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int firstFromItemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object firstFromItem = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object tail = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildFromItems(firstFromItem, tail); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("from_items",21, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // from_items ::= table_expression joined_tail 
            {
              Object RESULT =null;
		int firstFromItemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int firstFromItemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object firstFromItem = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object tail = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildFromItems(firstFromItem, tail); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("from_items",21, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cross_joined_tail ::= table_expression 
            {
              Object RESULT =null;
		int fromItemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fromItemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object fromItem = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildTail(fromItem); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cross_joined_tail",22, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cross_joined_tail ::= cross_joined_tail COMMA table_expression 
            {
              Object RESULT =null;
		int fromItemsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int fromItemsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object fromItems = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int fromItemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fromItemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object fromItem = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildTail(fromItems, fromItem); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cross_joined_tail",22, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // joined_tail ::= joined_table_expression 
            {
              Object RESULT =null;
		int fromItemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fromItemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object fromItem = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildTail(fromItem); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("joined_tail",23, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // joined_tail ::= joined_tail joined_table_expression 
            {
              Object RESULT =null;
		int fromItemsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int fromItemsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object fromItems = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int fromItemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fromItemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object fromItem = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildTail(fromItems, fromItem); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("joined_tail",23, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // joined_table_expression ::= JOIN_OPERATOR table_expression ON expr_boolean 
            {
              Object RESULT =null;
		int joinOpleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int joinOpright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String joinOp = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int fromItemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int fromItemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object fromItem = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildJoinedTableExpression(joinOp, fromItem, e); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("joined_table_expression",24, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // joined_table_expression ::= CROSS_JOIN_OPERATOR table_expression 
            {
              Object RESULT =null;
		int fromItemleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fromItemright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object fromItem = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildJoinedTableExpression(fromItem); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("joined_table_expression",24, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // table_expression ::= IDENTIFIER 
            {
              Object RESULT =null;
		int identTableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identTableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String identTable = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildTableExpression(identTable, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_expression",25, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // table_expression ::= IDENTIFIER AS IDENTIFIER 
            {
              Object RESULT =null;
		int identTableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int identTableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String identTable = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int identAliasleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identAliasright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String identAlias = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildTableExpression(identTable, identAlias); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_expression",25, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // table_expression ::= IDENTIFIER IDENTIFIER 
            {
              Object RESULT =null;
		int identTableleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int identTableright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String identTable = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int identAliasleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identAliasright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String identAlias = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildTableExpression(identTable, identAlias); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_expression",25, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // table_expression ::= PARENT_L select_body PARENT_R AS IDENTIFIER 
            {
              Object RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object select = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int identAliasleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identAliasright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String identAlias = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildTableExpression(select, identAlias); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_expression",25, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // table_expression ::= PARENT_L select_body PARENT_R IDENTIFIER 
            {
              Object RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object select = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int identAliasleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int identAliasright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String identAlias = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildTableExpression(select, identAlias); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("table_expression",25, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // clause_where ::= WHERE expr_boolean 
            {
              Object RESULT =null;
		int predicateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int predicateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object predicate = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildClauseWhere(predicate); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("clause_where",31, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // clause_group_by ::= GROUP_BY tuple 
            {
              Object RESULT =null;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object tuple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildClauseGroupBy(tuple); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("clause_group_by",32, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // clause_group_by ::= GROUP_BY tuple HAVING expr_boolean 
            {
              Object RESULT =null;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object tuple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int predicateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int predicateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object predicate = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildClauseGroupBy(tuple, predicate); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("clause_group_by",32, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // with_clause ::= WITH with_list 
            {
              Object RESULT =null;
		int withListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int withListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object withList = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                       RESULT = (CTEsContainer) withList;
                   
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_clause",26, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // with_list ::= with_list_element 
            {
              Object RESULT =null;
		int withListElementleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int withListElementright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object withListElement = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildWithList(withListElement); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_list",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // with_list ::= with_list COMMA with_list_element 
            {
              Object RESULT =null;
		int withListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int withListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object withList = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int withListElementleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int withListElementright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object withListElement = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildWithList(withList, withListElement); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_list",27, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // with_list_element ::= with_list_element_head 
            {
              Object RESULT =null;
		int withListElementHeadleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int withListElementHeadright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object withListElementHead = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                             RESULT = (CommonTableExpression) withListElementHead;
                         
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_list_element",28, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // with_list_element ::= with_list_element_head cycle_clause 
            {
              Object RESULT =null;
		int withListElementHeadleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int withListElementHeadright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object withListElementHead = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int cycleClauseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cycleClauseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object cycleClause = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildCte(withListElementHead, cycleClause); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_list_element",28, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // with_list_element_head ::= IDENTIFIER PARENT_L identifiers_list PARENT_R AS PARENT_L select_body PARENT_R 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)).value;
		int withColumnListleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int withColumnListright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		List<String> withColumnList = (List<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int selectBodyleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int selectBodyright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object selectBody = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildCteHead(ident, withColumnList, selectBody); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("with_list_element_head",29, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cycle_clause ::= CYCLE identifiers_list SET IDENTIFIER TO STRING DEFAULT STRING 
            {
              Object RESULT =null;
		int cycleColumnsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int cycleColumnsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		List<String> cycleColumns = (List<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int cycleMarkerNameleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int cycleMarkerNameright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String cycleMarkerName = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int markerCycledleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int markerCycledright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String markerCycled = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int markerDefaultleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int markerDefaultright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String markerDefault = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildCteCycleClause(cycleColumns, cycleMarkerName, markerCycled, markerDefault); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cycle_clause",30, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tuple ::= expr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildTuple(expr); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("tuple",37, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tuple ::= tuple COMMA expr 
            {
              Object RESULT =null;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object tuple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildTuple(tuple, expr); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("tuple",37, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_boolean ::= NOT PARENT_L expr_boolean_or PARENT_R 
            {
              Object RESULT =null;
		int expr_boolean_orleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int expr_boolean_orright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object expr_boolean_or = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
                        Predicate predicate = (Predicate) expr_boolean_or;
                        predicate.not = !predicate.not;
                        RESULT = predicate;
                    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean",33, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_boolean ::= expr_boolean_or 
            {
              Object RESULT =null;
		int expr_boolean_orleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int expr_boolean_orright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr_boolean_or = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr_boolean_or; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean",33, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_boolean_or ::= expr_boolean_and 
            {
              Object RESULT =null;
		int predicateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int predicateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object predicate = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = (Predicate) predicate; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_or",34, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr_boolean_or ::= NOT PARENT_L expr_boolean_and PARENT_R 
            {
              Object RESULT =null;
		int expr_booleanleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int expr_booleanright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object expr_boolean = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
                        Predicate predicate = (Predicate) expr_boolean;
                        predicate.not = !predicate.not;
                        RESULT = predicate;
                    
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_or",34, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr_boolean_or ::= expr_boolean OR expr_boolean_and 
            {
              Object RESULT =null;
		int predicateOrleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int predicateOrright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object predicateOr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int predicateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int predicateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object predicate = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildPredicateBracket(predicateOr, predicate, Conditions.BooleanOp.OR, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_or",34, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr_boolean_or ::= expr_boolean OR NOT PARENT_L expr_boolean_and PARENT_R 
            {
              Object RESULT =null;
		int predicateOrleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int predicateOrright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Object predicateOr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int predicateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int predicateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object predicate = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildPredicateBracket(predicateOr, predicate, Conditions.BooleanOp.OR, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_or",34, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr_boolean_and ::= expr_boolean_atom 
            {
              Object RESULT =null;
		int predicateAtomleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int predicateAtomright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object predicateAtom = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = predicateAtom; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_and",35, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr_boolean_and ::= NOT expr_boolean_atom 
            {
              Object RESULT =null;
		int predicateAtomleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int predicateAtomright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object predicateAtom = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                            Predicate predicate = (Predicate) predicateAtom;
                            predicate.not = !predicate.not;
                            RESULT = predicate;
                        
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_and",35, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr_boolean_and ::= NOT PARENT_L expr_boolean_atom PARENT_R 
            {
              Object RESULT =null;
		int predicateAtomleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int predicateAtomright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object predicateAtom = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		
                            Predicate predicate = (Predicate) predicateAtom;
                            predicate.not = !predicate.not;
                            RESULT = predicate;
                        
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_and",35, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr_boolean_and ::= expr_boolean_and AND expr_boolean_atom 
            {
              Object RESULT =null;
		int predicateAndleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int predicateAndright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object predicateAnd = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int predicateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int predicateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object predicate = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildPredicateBracket(predicateAnd, predicate, Conditions.BooleanOp.AND, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_and",35, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr_boolean_and ::= expr_boolean_and AND NOT expr_boolean_atom 
            {
              Object RESULT =null;
		int predicateAndleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int predicateAndright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object predicateAnd = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int predicateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int predicateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object predicate = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildPredicateBracket(predicateAnd, predicate, Conditions.BooleanOp.AND, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_and",35, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cmp_op ::= EQUAL 
            {
              String RESULT =null;
		 RESULT = "="; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cmp_op",63, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // cmp_op ::= NOT_EQUAL 
            {
              String RESULT =null;
		 RESULT = "<>"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cmp_op",63, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // cmp_op ::= LESS_EQUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cmp_op",63, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // cmp_op ::= GREAT_EQUAL 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cmp_op",63, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // cmp_op ::= LESS 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cmp_op",63, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // cmp_op ::= GREAT 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("cmp_op",63, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr_boolean_atom ::= REGEXP_MATCH PARENT_L expr COMMA expr PARENT_R 
            {
              Object RESULT =null;
		int sourceleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int sourceright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object source = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int templateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int templateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object template = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildRegExpMatch(source, template, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr_boolean_atom ::= REGEXP_MATCH PARENT_L expr COMMA expr COMMA STRING PARENT_R 
            {
              Object RESULT =null;
		int sourceleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int sourceright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Object source = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int templateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int templateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object template = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String params = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildRegExpMatch(source, template, params); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr_boolean_atom ::= expr LIKE expr ESCAPE STRING 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildLike(first, second, s, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr_boolean_atom ::= expr NOT LIKE expr ESCAPE STRING 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildLike(first, second, s, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr_boolean_atom ::= expr LIKE expr 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildLike(first, second, null, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr_boolean_atom ::= expr NOT LIKE expr 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildLike(first, second, null, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr_boolean_atom ::= SUBORD PARENT_L expr COMMA expr PARENT_R 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildCodeCmp(first, second, PredicateForCodeComparison.ComparisonCodeOperation.CODE_ALL); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr_boolean_atom ::= SUBORD_DIRECT PARENT_L expr COMMA expr PARENT_R 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildCodeCmp(first, second, PredicateForCodeComparison.ComparisonCodeOperation.CODE_VASSAL); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr_boolean_atom ::= SUBORD_DIRECT_OR_EQUAL PARENT_L expr COMMA expr PARENT_R 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildCodeCmp(first, second, PredicateForCodeComparison.ComparisonCodeOperation.ROOT_VASSAL); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr_boolean_atom ::= LEAF PARENT_L expr COMMA expr PARENT_R 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildCodeCmp(first, second, PredicateForCodeComparison.ComparisonCodeOperation.CODE_LEAF); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr_boolean_atom ::= LEAF_OR_EQUAL PARENT_L expr COMMA expr PARENT_R 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildCodeCmp(first, second, PredicateForCodeComparison.ComparisonCodeOperation.ROOT_LEAF); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr_boolean_atom ::= SUBORD_OR_EQUAL PARENT_L expr COMMA expr PARENT_R 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildCodeCmp(first, second, PredicateForCodeComparison.ComparisonCodeOperation.ROOT_ALL); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr_boolean_atom ::= expr BETWEEN expr AND expr 
            {
              Object RESULT =null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Object operand = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildBetween(operand, first, second, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr_boolean_atom ::= expr NOT BETWEEN expr AND expr 
            {
              Object RESULT =null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Object operand = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildBetween(operand, first, second, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr_boolean_atom ::= EXISTS PARENT_L select_body PARENT_R 
            {
              Object RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object select = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildExists(select); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr_boolean_atom ::= expr IS NULL 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		 RESULT = SqlParseSupport.buildIsNull(expr, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr_boolean_atom ::= expr IS NOT NULL 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		 RESULT = SqlParseSupport.buildIsNull(expr, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr_boolean_atom ::= expr IN PARENT_L select_body PARENT_R 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int selectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object select = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildInSelect(expr, select, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr_boolean_atom ::= expr NOT IN PARENT_L select_body PARENT_R 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int selectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object select = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildInSelect(expr, select, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr_boolean_atom ::= PARENT_L tuple PARENT_R IN PARENT_L select_body PARENT_R 
            {
              Object RESULT =null;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Object tuple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int selectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object select = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildInSelect(tuple, select, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr_boolean_atom ::= PARENT_L tuple PARENT_R NOT IN PARENT_L select_body PARENT_R 
            {
              Object RESULT =null;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).right;
		Object tuple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-6)).value;
		int selectleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object select = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildInSelect(tuple, select, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-7)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr_boolean_atom ::= expr IN PARENT_L tuple PARENT_R 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object tuple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildInTuple(expr, tuple, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr_boolean_atom ::= expr NOT IN PARENT_L tuple PARENT_R 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object tuple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildInTuple(expr, tuple, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr_boolean_atom ::= expr cmp_op expr 
            {
              Object RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildComparison(first, oper, second); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr_boolean_atom ::= PARENT_L expr_boolean PARENT_R 
            {
              Object RESULT =null;
		int predicateleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int predicateright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object predicate = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = (Predicate) predicate; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_boolean_atom",36, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr ::= expr_binary_plus_minus_concat 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr",38, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr_binary_plus_minus_concat ::= expr_binary_mul_div 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_binary_plus_minus_concat",39, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr_binary_plus_minus_concat ::= expr_binary_plus_minus_concat PLUS_MINUS expr_binary_mul_div 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildExprBinary(expr1, op, expr2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_binary_plus_minus_concat",39, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr_binary_plus_minus_concat ::= expr_binary_plus_minus_concat CONCAT expr_binary_mul_div 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildExprBinary(expr1, "||", expr2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_binary_plus_minus_concat",39, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr_binary_mul_div ::= expr_atom 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_binary_mul_div",40, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr_binary_mul_div ::= expr_binary_mul_div STAR expr_atom 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildExprBinary(expr1, "*", expr2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_binary_mul_div",40, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr_binary_mul_div ::= expr_binary_mul_div DIV expr_atom 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildExprBinary(expr1, "/", expr2); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_binary_mul_div",40, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expr_atom ::= expr_identifier 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_atom",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expr_atom ::= expr_case 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_atom",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expr_atom ::= expr_scalar 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_atom",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expr_atom ::= expr_func 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_atom",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expr_atom ::= expr_extract 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_atom",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expr_atom ::= expr_over 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_atom",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expr_atom ::= term_code 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_atom",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expr_atom ::= term_date 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_atom",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expr_atom ::= term_time 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_atom",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expr_atom ::= term_timestamp 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_atom",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expr_atom ::= term_literal 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = expr; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_atom",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expr_atom ::= PLUS_MINUS expr_atom 
            {
              Object RESULT =null;
		int signleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String sign = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildExprUnary(sign, expr); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_atom",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expr_atom ::= PARENT_L expr PARENT_R 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildExprBracket(expr); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_atom",41, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // expr_extract ::= EXTRACT PARENT_L YEAR FROM expr PARENT_R 
            {
              Object RESULT =null;
		int exprFromleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int exprFromright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object exprFrom = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildExprExtractYear(exprFrom); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_extract",57, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expr_extract ::= EXTRACT PARENT_L extract_part FROM expr PARENT_R 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int exprFromleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int exprFromright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object exprFrom = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildExprExtract(s, exprFrom); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_extract",57, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // extract_part ::= MONTH 
            {
              String RESULT =null;
		 RESULT = "MONTH"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("extract_part",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // extract_part ::= DAY 
            {
              String RESULT =null;
		 RESULT = "DAY"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("extract_part",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // extract_part ::= HOUR 
            {
              String RESULT =null;
		 RESULT = "HOUR"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("extract_part",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // extract_part ::= MINUTE 
            {
              String RESULT =null;
		 RESULT = "MINUTE"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("extract_part",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // extract_part ::= SECOND 
            {
              String RESULT =null;
		 RESULT = "SECOND"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("extract_part",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // extract_part ::= TIMEZONE_HOUR 
            {
              String RESULT =null;
		 RESULT = "TIMEZONE_HOUR"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("extract_part",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // extract_part ::= TIMEZONE_MINUTE 
            {
              String RESULT =null;
		 RESULT = "TIMEZONE_MINUTE"; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("extract_part",62, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expr_identifier ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildIdentifier(i); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_identifier",42, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expr_identifier ::= STAR 
            {
              Object RESULT =null;
		 RESULT = SqlParseSupport.buildStar(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_identifier",42, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expr_identifier ::= IDENTIFIER DOT IDENTIFIER 
            {
              Object RESULT =null;
		int id_firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int id_firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String id_first = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int id_nextleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int id_nextright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String id_next = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildQualifiedIdentifier(id_first, id_next, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_identifier",42, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expr_identifier ::= IDENTIFIER DOT STAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		 RESULT = SqlParseSupport.buildQualifiedStar(id); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_identifier",42, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expr_identifier ::= BACK_QUOTE IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildQualifiedIdentifier("", id, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_identifier",42, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expr_identifier ::= IDENTIFIER DOT BACK_QUOTE IDENTIFIER 
            {
              Object RESULT =null;
		int id_firstleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int id_firstright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String id_first = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int id_nextleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int id_nextright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String id_next = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildQualifiedIdentifier(id_first, id_next, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_identifier",42, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr_case ::= expr_case_simple 
            {
              Object RESULT =null;
		int caseSimpleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int caseSimpleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object caseSimple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = (CaseSimple) caseSimple; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_case",43, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr_case ::= expr_case_search 
            {
              Object RESULT =null;
		int caseSearchleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int caseSearchright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object caseSearch = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = (CaseSearch) caseSearch; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_case",43, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expr_case_simple ::= CASE expr case_simple_conditions ELSE expr END 
            {
              Object RESULT =null;
		int caseExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int caseExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Object caseExpr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int caseSimpleConditionsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int caseSimpleConditionsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object caseSimpleConditions = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int caseElseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int caseElseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object caseElse = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildCaseSimple(caseExpr, caseSimpleConditions, caseElse); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_case_simple",44, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expr_case_simple ::= CASE expr case_simple_conditions END 
            {
              Object RESULT =null;
		int caseExprleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int caseExprright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object caseExpr = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int caseSimpleConditionsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int caseSimpleConditionsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object caseSimpleConditions = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildCaseSimple(caseExpr, caseSimpleConditions, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_case_simple",44, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // case_simple_conditions ::= WHEN expr THEN expr 
            {
              Object RESULT =null;
		int exprWhenleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int exprWhenright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object exprWhen = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int exprThenleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprThenright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object exprThen = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildCaseSimpleConditions(exprWhen, exprThen); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_simple_conditions",45, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // case_simple_conditions ::= case_simple_conditions WHEN expr THEN expr 
            {
              Object RESULT =null;
		int caseSimpleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int caseSimpleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Object caseSimple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int exprWhenleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int exprWhenright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object exprWhen = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int exprThenleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprThenright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object exprThen = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildCaseSimpleConditions(caseSimple, exprWhen, exprThen); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_simple_conditions",45, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expr_case_search ::= CASE case_search_conditions ELSE expr END 
            {
              Object RESULT =null;
		int caseSearchConditionsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int caseSearchConditionsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object caseSearchConditions = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int caseElseleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int caseElseright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object caseElse = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildCaseSearch(caseSearchConditions, caseElse); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_case_search",46, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expr_case_search ::= CASE case_search_conditions END 
            {
              Object RESULT =null;
		int caseSearchConditionsleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int caseSearchConditionsright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object caseSearchConditions = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = (CaseSearch) caseSearchConditions; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_case_search",46, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // case_search_conditions ::= WHEN expr_boolean THEN expr 
            {
              Object RESULT =null;
		int exprWhenleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int exprWhenright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object exprWhen = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int exprThenleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprThenright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object exprThen = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildCaseSearchConditions(exprWhen, exprThen); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_search_conditions",47, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // case_search_conditions ::= case_search_conditions WHEN expr_boolean THEN expr 
            {
              Object RESULT =null;
		int caseSearchleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int caseSearchright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Object caseSearch = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int exprWhenleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int exprWhenright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object exprWhen = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int exprThenleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int exprThenright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object exprThen = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildCaseSearchConditions(caseSearch, exprWhen, exprThen); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("case_search_conditions",47, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // expr_scalar ::= SCALAR PARENT_L select_body PARENT_R 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildExprScalar(s); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_scalar",48, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // expr_func ::= IDENTIFIER PARENT_L DISTINCT tuple PARENT_R 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object tuple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		  RESULT = SqlParseSupport.buildExprFunction(ident, tuple, true); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_func",49, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // expr_func ::= IDENTIFIER PARENT_L tuple PARENT_R 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object tuple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		  RESULT = SqlParseSupport.buildExprFunction(ident, tuple, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_func",49, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr_func ::= IDENTIFIER PARENT_L PARENT_R 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		  RESULT = SqlParseSupport.buildExprFunction(ident, null, false); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_func",49, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr_over ::= expr_func OVER PARENT_L PARENT_R 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)).value;
		 RESULT = SqlParseSupport.buildExprFunctionOver(func, null, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_over",50, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr_over ::= expr_func OVER PARENT_L clause_partition_by clause_order_by PARENT_R 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int partright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Object part = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int orderleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int orderright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object order = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildExprFunctionOver(func, part, order); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_over",50, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-5)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expr_over ::= expr_func OVER PARENT_L clause_partition_by PARENT_R 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).right;
		Object func = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)).value;
		int partleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int partright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object part = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildExprFunctionOver(func, part, null); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr_over",50, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-4)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // clause_partition_by ::= PARTITION_BY tuple 
            {
              Object RESULT =null;
		int tupleleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int tupleright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Object tuple = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = tuple; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("clause_partition_by",51, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // term_code ::= TO_CODE PARENT_L STRING PARENT_R 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		 RESULT = SqlParseSupport.buildValueCode(s); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("term_code",52, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // term_date ::= DATE STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildValueDate(s); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("term_date",53, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // term_time ::= TIME STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildValueTime(s); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("term_time",54, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // term_timestamp ::= TIMESTAMP STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildValueTimeStamp(s); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("term_timestamp",55, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // term_literal ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new ValueConst(Boolean.valueOf(true)); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("term_literal",56, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // term_literal ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new ValueConst(Boolean.valueOf(false)); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("term_literal",56, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // term_literal ::= NUMBER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildValueNumber(s); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("term_literal",56, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // term_literal ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = new ValueConst((String) s); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("term_literal",56, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // term_literal ::= NULL 
            {
              Object RESULT =null;
		 RESULT = ValueConst.createNull(); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("term_literal",56, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // comments ::= COMMENT 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = SqlParseSupport.buildComment(c); 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("comments",61, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SqlParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SqlParser$do_action(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack            CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
              return CUP$SqlParser$do_action_part00000000(
                               CUP$SqlParser$act_num,
                               CUP$SqlParser$parser,
                               CUP$SqlParser$stack,
                               CUP$SqlParser$top);
    }
}

}
